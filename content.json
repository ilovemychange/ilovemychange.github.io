{"pages":[{"title":"About","text":"소개 쇼트트랙선수 출신의 어느 SI 개발자입니다.계획, 정리, 문제해결에 관심 많습니다.C#, Java, SQL 조금 다룰 줄 압니다. 프로필 활동명은 ilovemychange입니다.직업은 개발자입니다.분야는 의료입니다.경력은 만 3년입니다.나이는 스물아홉입니다.성별은 남자입니다. 좌우명 Be the change that you wish to see in the world.세상을 변화시키고 싶다면, 당신부터 변화된 삶을 살아라. (마하트마 간디) 블로그를 하는 이유 첫째, 정리하는 능력과 습관을 기르기 위함입니다.둘째, 시간이 지나면 잊혀지는 것들을 기록으로 남기기 위함입니다. 연락처ilovemychange@gmail.com 끝.","link":"/about/index.html"},{"title":"HAPI FHIR 환경 구성하기 (2&#x2F;5편) - Tomcat 설치","text":"오픈소스 HAPI FHIR 환경은 다음과 같이 5단계로 구성된다.본 글에서는 2. HAPI FHIR 환경 구성하기 (2/5편) - Tomcat 설치에 대해 다룬다. HAPI FHIR 환경 구성하기 (1/5편) - JDK, Eclipse 설치 HAPI FHIR 환경 구성하기 (2/5편) - Tomcat 설치 HAPI FHIR 환경 구성하기 (3/5편) - MySQL 설치 HAPI FHIR 환경 구성하기 (4/5편) - hapi-fhir-jpa-server 설치하기 HAPI FHIR 환경 구성하기 (5/5편) - hapi-fhir-client 설치하기 (작성중) Tomcat은 전세계적으로 가장 많이 사용되는 오픈소스 웹 컨테이너다. 아파치 소프트웨어 재단에서 개발한 서블릿 컨테이너(또는 웹 컨테이너)만 있는 웹 애플리케이션 서버이다. Tomcat은 웹서버와 연동하여 실행할 수 있는 자바 환경을 제공하여 JSP와 자바 서블릿이 실행될 수 있는 환경을 제공하고 있다. Tomcat 8.5 설치하기 Apache Tomcat 사이트(링크: http://tomcat.apache.org/)에 접속하여 Tomcat 8 다운로드 페이지로 이동한다. Tomcat 8은 현재(2020년 9월 11일) 8.5.57 버전까지 릴리즈되었다. “32-bit/64-bit Windows Service Installer”를 선택하여 제품을 내려받는다. 내려받은 Setup파일을 실행하여 설치를 진행한다. 소프트웨어 사용 라이센스에 동의하고 넘어간다. 컴포넌트를 선택하고 Next 진행한다. Tomcat은 디폴트 8080포트로 설정되나, 다른 포트로 접속하고자 한다면 포트번호를 변경한다. 그리고 User Name과 Password를 설정하고 Next로 넘어간다. JVM경로를 지정해준다. jdk를 설치했던 폴더 경로를 다음과 같이 잡도록 한다. 다음으로 진행하기 전에, 프로젝트 폴더(D:/hapi-fhir)내에 Tomcat을 설치할 폴더를 생성하도록 한다. 다음과 같이 Tomcat 8.5라는 폴더를 생성하였다. 방금 전에 생성한 Tomcat 8.5 폴더를 설치 경로로 잡아준 후에 Install을 진행한다. 설치가 완료되었다면, Finish를 눌러 종료한다. (Tomcat 서버를 테스트해보려면, Run Apache Tomcat을 체크한다.) Tomcat이 정상적으로 실행되는지 확인해보기 위해 웹 브라우저를 열어서 “localhost:8080”을 입력한다. 다음과 같은 화면이 뜬다면 정상적으로 설치 및 실행된 것이다. Tomcat 설치는 이것으로 마무리한다. 끝.","link":"/delete/hapi-fhir-environment-2.html"},{"title":"HAPI FHIR 환경 구성하기 (1&#x2F;5편) - JDK, Eclipse 설치","text":"오픈소스 HAPI FHIR 환경은 다음과 같이 5단계로 구성된다.본 글에서는 1. HAPI FHIR 환경 구성하기 (1/5편) - JDK, Eclipse 설치에 대해 다룬다. HAPI FHIR 환경 구성하기 (1/5편) - JDK, Eclipse 설치 HAPI FHIR 환경 구성하기 (2/5편) - Tomcat 설치 HAPI FHIR 환경 구성하기 (3/5편) - MySQL 설치 HAPI FHIR 환경 구성하기 (4/5편) - hapi-fhir-jpa-server 설치하기 HAPI FHIR 환경 구성하기 (5/5편) - hapi-fhir-client 설치하기 (작성중) OpenJDK 14 설치하기JDK(Java Development Kit)은 자바 어플리케이션을 구축하기 위한 플랫폼 구성요소다. JDK는 대표적으로 OracleJDK와 OpenJDK가 있는데, 이 중에서 오픈소스인 OpenJDK를 설치하도록 한다, (OracleJDK의 경우 현재 라이센스 이슈가 있다.) 그 중에서 가장 최근 릴리즈버전인 OpenJDK 14를 설치한다. 필자는 Windows 환경에서 설치중이므로, 이제부터 Windows를 기준으로 설명하겠다. OpenJDK 14 페이지에 접속하여 Windows .zip 파일을 클릭하여 내려받는다. 내려받은 파일을 압축을 푼다. D드라이브 아래 hapi-fhir라는 폴더를 생성한 후에 압축을 푼 jdk 폴더를 D:/hapi-fhir 경로로 위치시킨다.Hapi-fhir 폴더는 hapi의 각종 소프트웨어와 소스가 위치하게될 프로젝트 폴더이니 기억해두도록 한다. 다운받은 jdk를 시스템 환경변수에 등록해주어야 한다. [제어판] &gt; [시스템] &gt; [고급 시스템 설정] &gt; [고급 탭] &gt; [환경변수] 순으로 타고 들어간다.먼저, [제어판]에서 [시스템]을 선택한다. [시스템] 좌측 메뉴에서 [고급 시스템 설정]을 선택한다. [시스템 속성]의 [고급] 탭에서 [환경 변수]를 선택한다. [시스템 변수]를 새로 만든다. 새 시스템 변수로 “JAVA_HOME”을 등록해준다. 변수값으로는 앞서 내려받은 jdk 폴더 경로를 지정해준다. D:/hapi-fhir/jdk-14.0.2(Jdk 폴더명은 본인이 다운받은 jdk 버전에 따라 약간의 차이가 있을 수 있으니 잘 확인하여 진행한다.)등록한 후에는 [확인] 버튼을 선택하여 빠져나간다. 다음으로는 Path에 JAVA_HOME을 등록해주어야 한다. 시스템 변수 중에 “Path”를 찾아 [편집]한다.Path에 한줄을 추가하여 %JAVA_HOME%`bin 을 등록한다. 환경변수 편집이 끝났으므로, [확인] 버튼을 선택하여 빠져나간다. jdk가 환경변수로 잘 등록되었는지 확인해볼 차례다. Command를 실행하여 java -version 을 실행해본다. 본인이 설치한 jdk의 버전이 아래에 잘 출력되는지 확인한다. Eclipse 설치하기 Eclipse란 Java를 기반으로 한 오픈소스 IDE(통합개발환경)이다. hapi-fhir는 Java로 이루어져있기 때문에 Eclipse를 활용하여 개발환경을 구성하도록 한다. https://www.eclipse.org/downloads/ 링크로 접속하여, Download 64 bit 버튼을 선택한다. 다운로드 버튼을 클릭하여 Eclipse Installer를 내려받는다. Eclipse Installer를 실행하면 다음과 같은 로딩화면이 뜬다. 로딩이 끝날 때까지 조금만 기다린다. Eclipse Installer를 통해 Eclipse의 다양한 패키지들을 선택하여 설치를 진행할 수 있다. 우리는 Eclipse IDE for Enterprise Java Developers를 선택하여 진행한다. JVM 경로와 설치경로(Installation Folder)를 지정한다. JVM는 jdk 설치폴더 경로를 잡아주고, 설치경로는 우리의 프로젝트 폴더(D:\\hapi-fhir)로 잡아준다. 소프트웨어 사용과 관련된 동의서이다. Accept Now를 누르고 진행한다. 다음과 같이 설치가 진행된다. 중간중간 팝업창이 뜨면 계속 진행하면 된다. 설치가 끝났다. Eclipse를 실행해보고 싶다면 Launch를 누른다. 지정한 설치경로 (D:/hapi-fhir) 아래에 다음과 같이 eclipse 폴더가 생성이 된다. 참고로, 시스템 환경변수에 JAVA_HOME을 추가하지 않으면 Eclipse 실행 시에 Java virtual machine을 찾지 못하는 경고창이 뜨게 되므로, 위로 올라가서 시스템 환경변수 등록 절차를 진행하기 바란다. OpenJDK 14 설치와 Eclipse 설치는 이것으로 마무리한다. 끝.","link":"/delete/hapi-fhir-environment-1.html"},{"title":"HAPI FHIR 환경구성 개요","text":"오픈소스 HAPI FHIR 환경은 다음과 같은 순서로 구축한다. 상세한 구축 가이드는 그림과 설명을 통해 작성하다보니 꽤 길어져서 여러 편에 걸쳐 나누어 정리해야할 것 같다. 소프트웨어 설치 HAPI FHIR 환경 구성하기 (1/5편) - JDK, Eclipse 설치 HAPI FHIR 환경 구성하기 (2/5편) - Tomcat 설치 HAPI FHIR 환경 구성하기 (3/5편) - MySQL 설치 HAPI FHIR 세팅서버 HAPI FHIR 환경 구성하기 (4/5편) - hapi-fhir-jpa-server 설치하기 클라이언트 HAPI FHIR 환경 구성하기 (5/5편) - hapi-fhir-client 설치하기 (작성중) 끝.","link":"/delete/hapi-fhir-environment-0.html"},{"title":"HAPI FHIR 환경 구성하기 (4&#x2F;5편) - HAPI FHIR JPA SERVER 설치하기","text":"오픈소스 HAPI FHIR 환경은 다음과 같이 5단계로 구성된다.본 글에서는 4. HAPI FHIR 환경 구성하기 (4/5편) - hapi-fhir-jpa-server 설치하기에 대해 다룬다. HAPI FHIR 환경 구성하기 (1/5편) - JDK, Eclipse 설치 HAPI FHIR 환경 구성하기 (2/5편) - Tomcat 설치 HAPI FHIR 환경 구성하기 (3/5편) - MySQL 설치 HAPI FHIR 환경 구성하기 (4/5편) - hapi-fhir-jpa-server 설치하기 HAPI FHIR 환경 구성하기 (5/5편) - hapi-fhir-client 설치하기 (작성중) HAPI-FHIR 서버 소스 내려받기HAPI란, HL7 Application Programming Interface의 약자로 HL7 FHIR 사양으로 구현한 오픈소스 Java 라이브러리이다. HAPI-FHIR 홈페이지에 접속하여, Documentation 메뉴로 접속한다. 좌측 메뉴에서 [JPA SERVER] &gt; [Get Started] 를 선택하여, 게시되어 있는 Github 소스코드 경로로 접속한다. Github에서 소스코드 ZIP 파일을 내려받는다. 앞으로 FHIR와 관련된 소스코드를 보관할 경로를 만들어보자. 프로젝트 폴더(D:/hapi-fhir) 아래에 workspaces라는 폴더를 생성한다. workspaces 폴더(D:/hapi-fhir/workspaces) 아래에 다시 workspace_jpaserver 라는 폴더를 생성한다. 이 폴더는 HAPI FHIR JPA SERVER 소스코드를 보관할 경로이다. workspace_ jpaserver 폴더(D:/hapi-fhir/workspaces/workspace_jpaserver) 아래에 Github에서 내려받은 ZIP파일 압축을 풀어준다. Eclipse에 프로젝트 임포트하기 앞서 설치하였던 Eclipse를 실행한다. \u0010Eclipse를 실행하면, 가장 먼저 Workspace 경로를 지정하는 화면이 뜰 것이다. 그럼 앞서 HAPI FHIR JPA SERVER 소스코드를 저장한 경로 (D:/hapi-fhir/workspaces/workspace_jpaserver)를 지정하고 Launch한다. Eclipse가 실행되었지만, 아직 어떠한 프로젝트도 떠 있지 않은 빈 화면 상태이다. 앞서 내려받았던 HAPI JPA SERVER 프로젝트를 임포트하기 위해, 좌측 Project Explorer에서 Import projects를 한다. HAPI FHIR JPA SERVER는 빌드 도구로 maven을 사용하기 때문에, Existing Maven Projects를 선택하여 진행한다. Root Directory에 HAPI FHIR JPA SERVER 소스코드 경로를 지정해준다. (D:/hapi-fhir/workspaces/workspace_jpaserver/hapi-fhir-jpaserver-starter-master) 그리고, 각종 maven 라이브러리가 정의되어 있는 pom.xml 파일을 선택한 후에 Finish한다. 그럼 아래와 같이 HAPI FHIR JPA SERVER 프로젝트가 임포트된 것을 확인할 수 있다. 각종 설정값 변경하기hapi.properties 수정src/main/resources/hapi.properties 파일을 열어 아래와 같이 설정값을 수정한다. 수정사항은 크게 3가지이다. fhir_version을 변경한다. datasource 설정을 h2에서 mysql 내용으로 변경한다. hibernate 설정을 변경한다. 1234567891011121314151617181920212223242526272829303132333435#fhir_version 설정을 R4(초기값)에서 DSTU3로 설정한다.#fhir_version = R4fhir_version = DSTU3#datasource 설정을 h2(초기값)에서 MySQL로 변경한다.#datasource.driver=org.h2.Driverdatasource.driver=com.mysql.cj.jdbc.Driver#datasource.url=jdbc:h2:file:./target/database/h2datasource.url=jdbc:mysql://localhost:3306/hapi_dstu3?characterEncoding=UTF-8&amp;serverTimezone=UTCdatasource.username=rootdatasource.password=12345678#hibernate 설정을 h2(초기값)에서 MySQL로 변경한다.#hibernate.dialect=org.hibernate.dialect.H2Dialecthibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect#hibernate.search.default.indexBase 경로를 아래와 같이 지정해준다. #다만, 경로에 해당 폴더가 존재하지 않으면 에러가 발생하니 D:/hapi-fhir/hibernate/lucence/indexes 폴더를 반드시 만들어준다.hibernate.search.default.indexBase=D:/hapi-fhir/hibernate/lucence/indexeshibernate.search.lucene_version=LUCENE_CURRENT#jpa-server 기동시 MySQL 스키마를 자동 업데이트하기 위해 아래 설정을 update로 변경한다.hibernate.hbm2ddl.auto=update########################################################################################################### 아래는 선택사항이다. 사용자에 따라 필요시 추가하도록 한다.#(선택사항)SQL을 로그에 찍어보고 싶다면 아래 설정을 true로 변경한다. 초기값은 false일 것이다.hibernate.format.sql=truehibernate.show_sql=true#(선택사항)Create 명령 실행 시 java.lang.reflect.InvocationTargetException:null 오류가 발생하여 아래 설정을 추가하였더니 해결되었다.# 다만, Create 1회만 실행하고 다시 주석처리하여 서버를 재기동 해야한다.hibernate.temp.use_jdbc_metadata_defaults=false pom.xml 수정hapi-fhir-jpaserver-starter-master 프로젝트 가장 상위 경로에 pom.xml이라는 파일이 있을 것이다. 파일을 열어서 아래 내용을 수정한다. H2 데이터베이스 내용이 있다면, 필요없으므로 주석처리한다. 현 프로젝트에서는 MySQL을 사용하므로, MySQL 설정이 필요하다. MySQL 관련된 설정이 있는지 확인하여 만약 없으면 추가한다. 123456789101112131415&lt;!-- H2 데이터베이스 내용을 찾아 아래와 같이 주석처리한다. --&gt;&lt;!-- &lt;dependency&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;/dependency&gt;--&gt;&lt;!-- dependencies 아래에 MySQL 설정이 있는지 확인하고, 없다면 추가한다. --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.16&lt;/version&gt; &lt;/dependency&gt; @Test 찾아서 모두 주석처리src/test/java/ca/uhn/fhir/jpa/starter 폴더 아래 java 클래스에 선언되어 있는 @Test 를 전부 주석처리한다.@Test 코드를 주석처리하는 이유는, 해당 코드들로 인해서 maven-install 시에 오류가 발생하기 때문이다. @Test 코드를 주석처리한 후에는 maven-install 이 정상적으로 실행되었다.(Ctrl+H를 눌러, File Search를 활용하여 @Test 코드를 전부 서치하는 것을 추천한다. 전부 주석처리한다.) 12//아래와 같이 주석처리한다.//@Test HAPI-FHIR 버전에 따라 다를 수 있지만, 가이드 작성자는 아래의 java 파일들에 @Test 코드들이 선언되어 있었으니, 참고한다. ExampleServerDstu2IT.java ExampleServerDstu3IT.java ExampleServerR4IT.java ExampleServerR5IT.java MultitenantServerR4IT.java Maven Update 및 Maven Install 실행 Maven Update를 진행한다. Maven update란, pom.xml에 정의된 각종 maven 라이브러리를 중앙 레포지토리에서 가져오는 (업데이트하는) 기능이다. 실행방법은 [프로젝트 우클릭] &gt; [Maven] &gt; [Update Project..]이다. Force Update of Snapshots/Releases를 선택하여 업데이트를 진행한다. 최초로 Maven Update를 실행하는 경우에는 약 5분 ~ 10분 정도 소요될 것이다. Maven Install을 실행한다. 실행방법은 [프로젝트 우클릭] &gt; [Run As] &gt; [Maven install]이다. Maven Install이 정상적으로 완료되면, 아래와 같이 Console 창에 Build Success가 출력될 것이다. Eclipse 내에 Tomcat Server 세팅 및 실행하기 [Window] &gt; [Preferences] 를 연다. [Server] &gt; [Runtime Environment]로 들어가서 Server를 Add한다. 앞서 Tomcat 8.5를 설치했으니, 싱크를 맞춰 Apache Tomcat v8.5 버전을 선택하고 넘어간다. 앞서 Tomcat을 설치했던 경로와, jdk를 설치했던 경로를 지정하고 Finish한다. Apache Tomcat v8.5가 생성되었다. Apply and Close를 눌러 저장하고 빠져나간다. 앞서 등록한 Tomcat Server를 HAPI FHIR JPA SERVER 프로젝트의 로컬서버로 등록해본다. [Server] 창 아래 No servers are available. Click this link to create a new server 링크를 클릭한다. Preference에 등록했던 대로, 아래와 같이 디폴트로 선택되어 있을 것이다. (디폴트로 지정되어 있지 않으면 직접 선택해도 된다.) 그대로 Finish하여 저장한다. Tomcat 8.5 로컬서버가 등록되었다. 더블 클릭해본다. Tomcat v8.5 Server at localhost를 더블클릭하면 설정을 변경할 수 있는 창이 뜬다. 여기서 아래와 같이 3가지를 변경한다. Server Options: (1) Push module contexts to separate XML files 와 (2) Modules auto reload by default 두 가지를 체크한다. Timeouts를 늘려준다. (Start 450, Stop 150) Tomcat admin port를 8005로 변경한다. 설정이 끝이 났으므로, 서버를 기동해본다. 서버를 우클릭하여 Start를 누른다. 서버가 에러 없이 잘 기동되는지 Console 창을 살펴본다. 별다른 에러 없이 다음과 같이 Console에 출력되면 서버가 잘 기동된 것이다. 서버가 기동되었으므로, 테스트화면에 접속하여 이상없이 동작하는지를 점검해본다. 브라우저를 열어 테스트화면의 주소를 입력한다. (localhost:8080/hapi-fhir-jpaserver/) 테스트화면의 주소는 hapi.properties 파일 내에도 선언되어 있으니 열어서 확인해보아도 된다. 샘플 테스트를 위해 Patient라는 Resource를 Create 해본다. 실행 방법은 좌측메뉴 [Patient] &gt; [CRUD Operation] &gt; ID 및 Contents 작성 &gt; [Create] 실행 순이다. 샘플로 입력할 Contents 내용은 아래 json 코드를 참고한다. 12345678910111213141516{ &quot;resourceType&quot;: &quot;Patient&quot;, &quot;id&quot;: &quot;1234&quot;, &quot;meta&quot;: { &quot;versionId&quot;: &quot;1&quot;, &quot;lastUpdated&quot;: &quot;2020-08-21T11:10:26.000+09:00&quot;, &quot;source&quot;: &quot;#JP0sa7sXme5pxIaA&quot; }, &quot;text&quot;: { &quot;status&quot;: &quot;generated&quot;, &quot;div&quot;: &quot;&lt;div xmlns=\\&quot;http://www.w3.org/1999/xhtml\\&quot;&gt;&lt;div class=\\&quot;hapiHeaderText\\&quot;/&gt;&lt;table class=\\&quot;hapiPropertyTable\\&quot;&gt;&lt;tbody/&gt;&lt;/table&gt;&lt;/div&gt;&quot; }, &quot;name&quot;: [ { &quot;text&quot;: &quot;Peter James&quot; } ]} 아래와 같이 정상적으로 실행되면, HAPI FHIR JPA SERVER 개발환경이 잘 세팅된 것이다. 끝. #개발/오픈소스/FHIR","link":"/delete/hapi-fhir-environment-4.html"},{"title":"HAPI FHIR 환경 구성하기 (3&#x2F;5편) - MySQL 설치","text":"오픈소스 HAPI FHIR 환경은 다음과 같이 5단계로 구성된다.본 글에서는 3. HAPI FHIR 환경 구성하기 (3/5편) - MySQL 설치에 대해 다룬다. HAPI FHIR 환경 구성하기 (1/5편) - JDK, Eclipse 설치 HAPI FHIR 환경 구성하기 (2/5편) - Tomcat 설치 HAPI FHIR 환경 구성하기 (3/5편) - MySQL 설치 HAPI FHIR 환경 구성하기 (4/5편) - hapi-fhir-jpa-server 설치하기 HAPI FHIR 환경 구성하기 (5/5편) - hapi-fhir-client 설치하기 (작성중) MySQL은 전세계적으로 가장 널리 사용되는 오픈소스 관계형 데이터베이스 관리 시스템( RDBMS)이다. FHIR 데이터를 저장할 데이터베이스로 활용한다. MySQL 설치하기 MySQL Downloads 사이트에 접속한다. (링크: https://www.mysql.com/downloads/) MySQL 제품 중, 무료 버전인 MySQL Community Edition(GPL)을 다운로드 받도록 한다. MySQL Installer for Windows를 선택하여 다운로드받는다. Installer를 활용하면 MySQL 제품들을 한번에 간편히 설치할 수 있다. MySQL Installer 다운로드 페이지에 들어가면 제품이 2가지가 보이는데, 그 중에서 파일 사이즈가 큰 것을 선택하여 다운로드를 진행한다. 현재(2020년 9월 11일) 기준으로 MySQL 최신 버전은 8.0.21이며, 최신버전으로 설치를 진행하였다. Login을 유도하는 창이 나오지만, 자세히보면 아래 쪽에 Login을 하지 않고 바로 다운로드를 진행하는 버튼이 있다. No thanks, just start my download를 선택한다. MySQL Installer를 내려받았으면, 실행하여 설치를 진행한다. Setup Type은 “Developer Default”를 선택한다. 요구사항을 체크하라는 페이지가 나오는데, 별도 체크없이 바로 Execute를 실행하여 전체 제품을 모두 설치한다. Installer가 차근차근 Check Requirements를 진행하는데, 중간중간에 소프트웨어 사용권 계약과 관련한 팝업창들이 뜬다. 동의하고 계속 진행한다. Next를 눌러 계속 진행한다. 만약에 다음과 같은 팝업창이 뜨면 Yes를 선택하고 계속 진행한다. Execute를 선택하여 설치를 진행한다. 설치가 잘 진행되었다면, Next를 눌러준다. Next MySQL Server의 사양을 선택한다. Standalone MySQL Server와 InnoDB Cluster 타입이 있는데, 이 중에서 InnoDB를 선택하고, Create a New InnoDB Cluster를 선택하여 설치를 진행한다. InnoDB Cluster의 Name, User 등을 설정한다. User-Name, Password는 원하는대로 설정하되, 잊어버리지 않게 잘 기억해두도록 한다. 또한 Host Address도 현재 Local PC를 잡아준다. Configuration Type과 Network를 아래와 같이 설정하고 진행한다. 만약 3306 포트를 사용할 수 없다면 다른 포트로 변경한다. Authentication Method는 MySQL에서 추천하는 것을 선택하고 넘어간다. MySQL Root 계정의 Password를 설정한다. Password를 잊어버리면 곤란해질 수 있으니 잘 기억해두도록 한다. 그리고 Add User를 선택하여 FHIR DB 사용자 계정을 만든다. FHIR DB 사용자명은 fhirman으로 설정하였다. (원하는 명칭으로 설정해도 무방하다.) Role은 DB Admin 권한을 부여하였다. 역시 비밀번호를 설정하고 잊어버리지 않게 잘 기억해두도록 한다. 다 입력하였다면 Ok를 선택하여 빠져나간다. fhirman이라는 사용자가 추가된 것을 확인할 수 있다. Next를 눌러 계속 진행한다. Server의 명칭을 설정하고 Next로 넘어간다. Default로 MySQL80으로 설정되어 있어서 별도 수정하지 않고 계속 진행하였으나, 명칭은 운영자가 원하는 대로 설정하여도 무방할 듯 하다. 설정을 적용한다. Execute를 선택한다. MySQL Workbench 활용하여 각종 환경설정하기위에서 설명한 절차대로 진행하였다면, MySQL Workbench가 함께 설치되었을 것이다. (만약 설치가 안되었다면, MySQL 홈페이지에서 별도로 설치가 가능하다)MySQL Workbench는 SQL 개발과 관리, 데이터베이스 설계, 생성 그리고 유지를 위한 단일 개발 통합 환경을 제공하는 비주얼 데이터베이스 설계 도구이다. MySQL Workbench에 대한 사용법은 생활코딩 사이트에서 무료로 제공하고 있으니 필요한 경우 참고하면 유용할 듯하다. MySQL Workbench를 실행하면 다음과 같은 화면이 뜬다. 최초로 MySQL Connection을 만들기 위해 + 버튼을 선택한다. Connection의 이름은 임의로 설정하여도 무방하나, Local PC에 설치하는 것이기 때문에 mysql_local이라고 이름을 지어주었다. 포트는 일반적으로 3306가 디폴트로 설정될 것이나, 앞에서 MySQL Server를 설치할 때 포트번호를 변경하였다면 해당 포트번호를 입력한다. User는 관리자 계정인 root로 접속해본다. Password를 입력하고 Test Connection을 클릭하면 연결이 잘 되었는지 실행결과를 볼 수 있다. 연결이 성공적으로 잘 되었다. Ok를 눌러서 Connection을 생성한다. 메인 화면에 Connection이 생성된 것을 볼 수 있다. 선택하여 MySQL Server에 접속한다. MySQL Server에 접속하여, Schema를 둘러본다. 기본적으로 sys와 mysql_innodb_cluster_metadata 스키마가 생성되어있다. Schemas 창 우클릭 &gt; Create Schema를 선택하여 fhir용으로 사용할 스키마를 생성한다. 스키마 명칭은 hapi-dstu3, Charset을 utf8로 설정하고, Apply를 눌러 진행한다. 자동으로 스키마 생성 SQL 스크립트가 생성된다. 이상이 없다면 Apply를 눌러 계속 진행한다. SQL 실행이 끝났으면 Finish한다. 앞서 생성하였던, fhirman 계정의 권한을 설정해보자. 좌측 Navigator 하단의 Administration 탭을 선택하면 각 계정의 권한을 관리하는 화면이 열린다. 여러 계정들의 리스트 중에소 fhirman을 선택한다. Fhirman 계정의 상세한 권한을 확인할 수 있다. 그 중에서 세번째 탭인 Administrative Roles를 눌러 권한이 잘 주어졌는지 확인한다. 현재는 특별히 제한할 권한이 없으므로, 전체 권한을 모두 부여하였다. 네번째 탭을 눌러 어떤 스키마에 권한을 부여할 것인지도 지정한다. Add Entry를 눌러서 신규로 생성하였던 hapi_dstu3 스키마 권한을 부여한다. hapi_dstu3 스키마에 대한 권한을 전체선택하고 Apply한다. MySQL 설치와 MySQL Workbench를 활용한 각종 환경세팅은 이것으로 마무리한다. 끝.","link":"/delete/hapi-fhir-environment-3.html"}],"posts":[{"title":"FHIR 시스템 구축을 위한 사전조사","text":"회사에서 FHIR 송수신 시스템을 구축하는 파일럿 프로젝트를 진행 중인데, 관련하여 사전조사한 정보들을 기록하고자 한다. 먼저 FHIR란, Fast Healthcare Interoperability Resources 의 약자로, HL7에서 개발된 의료정보의 전자교류를 위한 최신 국제표준 프로토콜이다. 의료 환경에서 다루어지는 다양한 정보들을 Resource 형태로 구현하고 이를 결합/제약/확장함으로서 다양한 의료정보들 간 상호운영성을 보장하는 표준안이다. FHIR의 특징FHIR의 특징은 다음과 같다. 개발자에게 구현 라이브러리와 다양한 예제를 제공하여, 빠르고 쉽게 구현 가능하다. 공개 표준으로 누구나 무료로 사용 가능하다. 기존의 표준(HL7 Version 2, CDA 등)과 공존하면서 서로 보완 가능하다. XML, JSON, HTTP, Atom, OAuth 등의 웹 표준을 기반으로 한다. 다양한 ICT환경에 쉽게 적용이 가능하다. 간결하고 쉽게 이해할 수 있다. 개발자가 쉽게 사용할 수 있도록 메뉴얼이 제공된다. FHIR 구축의 목적현 프로젝트 발주처에서는 왜 FHIR를 구축하고자 할까?에 대한 내 생각을 기록해보자면 다음과 같다. 여러 기관/기업/기기 혹은 개인이 사용하는 데이터를 표준에 맞추어 송수신하기 위함이다. 즉, A라는 기관(기업)에서 FHIR로 보낸 데이터를 받아서, 우리 발주처에 맞게 변형하여 데이터를 저장하기 위함이 있고, 우리 발주처에 저장된 데이터를 FHIR 형식으로 변환하여, 데이터가 필요한 다른 기관으로 전송하기 위함도 있다. 그럼 FHIR 데이터를 주고받을 수 있는 잠재적 교류 대상은 어디일까? 넓게 보면 의료와 관련된 모든 기관과 개인이 포함될 것이다. 환자 개인(의 앱 또는 저장소) 병원 (대형/중형/소형/개인병원 등) 기관 약국 금융/보험사 헬스 디바이스 헬스케어 기업등등 FHIR를 구축하기 위한 전체 범위아직까지 국내에서 FHIR를 A부터 Z까지 구축하고 운영하고 있다는 사례를 찾기가 어려워서, FHIR도 결국 일반적인 SI 프로젝트의 일부라고 가정하고 다음과 같이 FHIR 구축의 전체 범위를 예상해보았다. 첫째, Target 시스템과 Workflow 정의먼저 누구와 정보를 교류할 것인지를 정의하는 단계이다. 또한 해당 Target과 어떤 업무를 위해 FHIR를 구축하는 것인지 Workflow를 고려한다. 둘째, Target 시스템과 우리 기관과의 인증체계 정의누구와 정보를 교류할지 정해졌다면, 다음으로 그 Target과 서로가 확실한지 확인할 수 있는 체계를 어떻게 구성할지 정의하는 단계이다. 셋째, Target 시스템과의 데이터 송수신범위 정의우리 기관과 Target 기관의 모든 데이터를 주고받는 것은 한계가 있으므로, 어떤 데이터들을 주고받을지 범위를 정의하는 단계이다. 조금 더 구체적으로 들어가본다면, Target 시스템과 어떤 Resource들을 사용할 것인지 어떤 Contents를 담을 것인지가 정의되어야겠다. 넷째, FHIR 시스템 구축/개발위와 같이 약속된 내용에 대해 시스템을 구축하고 개발하는 단계이다. 다섯째, 인터페이스/테스트Target 시스템과의 인터페이스는 잘 이루어지는지, 올바른 데이터가 송수신되는지, 저장되었는지를 테스트하는 단계이다. 여섯째, 안정화/운영구축된 시스템을 운영하고 유지보수하는 단계이다. (FHIR를 아직 실제로 구축해본 것이 아니기 때문에 실제로는 예상을 뛰어넘는 범위들이 있을 수도 있고, 예상외로 간단히 해결되는 부분들도 있을 걸로 생각한다.) 참고 자료 고객중심형 의료정보시스템을 위한 HL7 FHIR 표준기술 활용가이드라인 개발(2차) HL7 FHIR 란? : 에스피메드 공식 블로그 Healthcare/IT/표준 FHIR로 시작하는 헬스케어 표준 살펴보기 - 보브부 블로그 끝.","link":"/2020/09/05/fhir-firstsearch/"},{"title":"의료 RPA 사업기획안 - Block of Medical RPA","text":"2019년도 여름, 팀에서 새로운 먹거리를 찾기위해 몇몇 팀원분들과 함께 약 2~3개월 동안 신사업 발굴/기획 업무를 담당하였다. 당시 재미있는 신사업 아이템이 여럿 발굴되었고, 그 중에서 필자가 담당하였던 Block of Medical RPA는 운이 좋게도 내부적으로 긍정적인 평가를 받아 고객사(병원)와 사업 협의 중인 단계로 발전하였다. 이에 당시 신사업 아이디어를 어떤 방향으로 기획하였는지 기록으로 남기고자 한다. 다만, 외부 공개가 되면 곤란한 영업비밀이 일부 있어 해당 부분은 제거하였다. Block of Medical RPA란, 각종 자동화 업무들을 블록의 형태로 쌓아가는 모습을 형상화한 아이디어의 명칭이며, 핵심은 RPA 기반의 의료 인력운영 효율화 플랫폼이다. RPA란, Robotic Process Automation의 약자로, UI(User Interface) 상에서 사용자가 수행하던 업무/작업을 자동화하는 기술을 일컫는다. 추진배경사업을 추진하게 된 배경은, 대형병원의 환자수 급증 현상에 있다. 여러 대형병원들이 가진 공통의 고민이자 현재 사회적인 이슈이기도 하다. 병원 입장에서 이를 해결하려면 당장 시급한 것이 바로 인프라, 제도, 인력운영 측면에서의 대책이라 생각했다. 환자가 늘어나면 가장 먼저 인프라에 부하가 오기 때문에 이에 대한 해결책이 필요하다. 건물/공간이 모자라고, 시스템이 감당을 못한다. 제도적으로도 해결책이 필요하다. 정부적 차원에서 현재 환자를 분산할 수 있는 지원책, 의료인력을 확충하는 지원책 등을 마련해주어야 한다. 마지막으로 인력운영 측면에서 해결책도 필요하다. 환자가 많아지는 것은 곧 직원들의 일이 늘어나는 것을 의미하기 때문이다. 현재 여러 상급종합병원의 경우 자체적인 인프라 확장을 진행중이고, 제도적으로도 “전문병원 제도”, “입원전담전문의 제도” 등 지원책이 등장하고 있다. 안타까운 점은 인력운영에 대해서는 뚜렷한 해결책이 없다는 것이다. 시간이 흐를수록 상급종합병원 직원들의 업무량은 끝도없이 늘어가고 있는 실정이다. 물론, 인력을 계속 때려박으면 문제가 해결되지 않을까 싶지만 병원들도 재정상황이 그리 녹록치 못하고, 더군다나 이는 의료계 추세와 맞지 않은 상황이다. 현재 의료계는 직접진료와 정밀의료 서비스 제공을 위해 전문 의료진 위주로 인력을 충원하고, 행정업무는 갈수록 효율화하고 있기 때문이다. 그렇다면 인력운영 효율화를 하기 위해서는 어떤 방법이 있을까? 이는 3가지로 나누어 생각해볼 수 있다. 첫째 업무속도를 향상시켜주는 방법, 둘째 업무 분장을 조정해주는 방법, 셋째 업무량을 줄여주는 방법이다. 조사를 통해 확인해보니 이미 여러 상급종합병원에서 업무속도향상 및 업무분장조정에 대한 대응책을 진행 중이거나 진행완료하였다. 다만, 업무량 자체를 줄여주는 방법에 대해서는 아직까지 도입한 사례는 뚜렷하게 확인하기 어려웠고 이 부분이 아직 개척되지 않은 미지의 영역일 수 있겠다 판단했다. 그렇다면 IT 기술로 업무량을 줄이는데 도움을 줄 수 있을 만한 업무영역은 어떤 것들이 있고, 어떤 IT기술들이 필요한지를 아래와 같이 조사하였다. 결론적으로는 RPA라는 기술이 다방면으로 활동될 수 있다는 점을 찾아냈다. 서두에서도 언급했으나 RPA란, 로보틱 처리 자동화 기술로 Email, Excel, XML, Web/App 등 다양한 작업유형들을 자동화할 수 있는 기술이다. HfS리서치, EY한영, 맥킨지, 가트너 등에서 발표한 내용들을 참고해보았을 때 현재 가장 뜨겁게 주목받고 있는 기술이면서, 한국에서도 금융/제조/유통 산업 중심으로 보급되고 있는 추세이다. RPA는 Robotic &gt; Cognitive Robotic &gt; Intelligent Robotic의 흐름으로 발전되고 있고, 그에 따라 RPA를 도입하는 병원에서는 이와 Align되는 방향으로 로드맵(추진전략)을 세울 수 있을 것으로 판단하였다. 즉, RPA를 단기적으로는 단순/반복 업무에, 중기적으로는 데이터분석 업무에, 장기적으로는 의학적 업무에 도입하는 것이다. 그리고 장기적인 Goal로는 CDSS를 대체할 수 있는 진단솔루션의 역할을 하는 것이다. 추진과제RPA는 좋은 기술이다. 하지만, 기술 그 자체가 상품이 되기는 어렵다고 생각했다. 기술을 고객이 이해할 수 있는 언어로 전달해야 매력적인 상품이 될 수 있겠다 판단했다. 그래서 탄생한 것이 Block of Medical RPA라는 컨셉이다. RPA로 자동화한 업무 프로세스들을 레고블럭처럼 차곡차곡 쌓아가는 모습을 형상화하였다. 이것들을 업무단위(y축)로, 그리고 시스템 단위(x축)으로 쌓아나갔을 때 안정적이게 쌓아올려질 수 있을 것이라는 이미지를 삽입하였다. RPA를 통해 구축될 전반적인 플랫폼의 구성도이다. (먼저, 우리가 도입한 RPA 솔루션은 UiPath의 제품이라는 것을 밝힌다.) Block of Medical RPA와 UiPath RPA는 하나의 상품으로 제공된다. 그리고 이는 Internal Legacy System(병원 내부 시스템)과 External Website(외부 사이트)들과 연계되어 동작한다. UiPath RPA는 업무 자동화 기술을 담당하고, Block of Medical RPA는 그 외의 KPI/ROI 모니터링, 타기관 사례 공유, 신규요구사항관리, 유지보수/변경관리 등의 플랫폼으로서의 기능을 담당한다. RPA 도입 프로세스는 일반적인 SI와 대동소이하지만, “안정화”라는 단계가 매우 중요하다. RPA는 살아 움직이는 시스템 위에서 동작하는 것이다 보니, 구축 단계에서 파악하지 못한 예외적인 케이스들이 많이 도출된다. 어찌보면 고객(병원)이 가장 궁금해할만한 부분일 것 같다. 병원의 어떤 업무들에 RPA를 도입할 수 있을까? 이를 도출하기 위해 함께 일하고 있는 병원 IT 전문가들과 수차례 브레인스토밍을 거쳐, 3가지 카테고리의 21개의 과제를 뽑아낼 수 있었다. 도출된 21개 과제들 중에서, 어떤 과제를 우선적으로 추진할지를 선정하였다. 실현가능성, 기대효과, 활용성이라는 3가지 기준을 가지고 정량평가를 통해 3개의 우선과제를 도출하였다. 우선과제 3개를 파일럿 형태로 적용하지만, 점진적으로 도입을 확대해나가는 모델은 아래와 같은 Double Diamond 프로세스가 될 것이다. 우선과제 3개 중에서, [신규직원 등록 및 각종 데이터 생성 작업]을 샘플로 업무 프로세스 구체화를 진행하였다. 세부적으로 쪼개보니 예상보다 많은 상세 작업들이 있음을 알 수 있다. 프로세스를 상세화하는 이유는, 자동화할 수 있는 범위를 예측하기 위함이다. 실제 RPA를 도입하게 되면, 아래와 유사한 형태로 프로세스를 상세화하고 평가하는 과정을 거치게 된다. 이 업무를 도입했을 때 얼마만큼의 효과가 기대되는지를 서울 A병원을 예시로 시뮬레이션해보았다. 데이터는 국민연금 기반 데이터를 근거로 하였다. 이 업무를 신규입사 뿐 아니라, 퇴사/휴직/파견/수련 등 직원 데이터가 갱신되는 모든 범위로 확장하였을 때 얼마만큼의 효과가 기대되는지를 서울 A병원을 예시로 시뮬레이션해보았다. 데이터는 국민연금 기반 데이터를 근거로 하되, 확인이 불가한 수치는 일부 추정치를 적용하였다. 추진비용서두에서도 언급했듯이, 비용과 관련된 부분은 영업비밀이기 때문에 내용을 제거하였다.","link":"/2019/10/10/block-of-medical-rpa/"},{"title":"FHIR 프로젝트 범위 확정안","text":"회사에서 FHIR 송수신 시스템을 구축하는 프로젝트를 진행 중인데, 프로젝트 범위를 어떻게 산정하였는지 기록하고자 한다. FHIR라는게 아직 아무도 걸어보지 않은 길이므로 프로젝트 범위를 협의하는 것에서부터 어려운 점들이 발생했다. 진행경과프로젝트가 시작되고 FHIR와 관련하여 진행되었던 경과는 다음과 같다. 요구사항 정의 단계에서 발주처와 수행사 간에 사업범위에 대한 이슈가 발생되어 잠시 진행이 홀딩된 상황이었고, 재협의를 통해 진행방안을 다시 정립하였다. FHIR 사전분석 및 공유 - 2020.08.04.화, 2020.08.26.수 요구사항 정의 회의 - 2020.08.04.화, 2020.08.10.월 FHIR 구축범위 이슈협의 - 2020.08.21.금 HAPI FHIR 검토 및 로컬테스트 (진행중) 진행방안 재협의 (진행중) FHIR 시스템 구축의 전체 범위FHIR 시스템을 신규로 구축하였을 때 예상되는 전체 사업의 범위는 다음과 같다. (FHIR를 아직 실제로 구축해본 것이 아니기 때문에 실제로 수행해보면 크고 작은 변동이 예상되나, 전반적인 흐름은 다음과 같을 것 같다는 예상안이다.) Target 시스템 및 Workflow 정의 Target 시스템의 인증체계 정의 Target 시스템과의 데이터 송수신범위 정의 FHIR 시스템 구축/개발 인터페이스/테스트 안정화/운영 이슈가 있었던 이유는, 현 프로젝트에서 Target 시스템이 정의되어 있지 않았기 때문이다. 그래서 프로젝트 시작 이후로도 연계가 가능한 기관을 물색하였으나, 현재까지 FHIR를 구축하고 운영중인 사례를 찾지 못하였다. 따라서 1번 ~ 3번까지 Target 시스템이 정의되어야만 가능한 업무들을 진행하는데 한계가 있었고, 더불어 6번 실제 운영까지도 연결되기도 어려운 상황이었다. 협의된 사업 범위하지만 FHIR 라는 것이 향후 의료정보 교류에 있어서 중요한 역할을 할 것임에 대해 발주처와 수행사가 서로 공감하는 바가 충분히 있었고, 아직까지는 잠재적이지만 조만간 나타날 Target 시스템을 위하여 임시 FHIR 시스템을 구축하는 것으로 협의를 진행하였다. 따라서 현 사업에서는 4번 ~ 5번에 대한 파일럿 환경을 구성하여 샘플 인터페이스를 진행하여 데이터가 잘 쌓이는지, 어떻게 쌓이는지 등을 테스트하고, 향후 Target 시스템이 정의된 이후에 활용이 가능하도록 각종 가이드를 도출하는 것으로 정하였다. 또한, 파일럿 환경이므로 상용 솔루션을 사용하기보단 가능하다면 오픈소스인 HAPI FHIR를 활용하는 방안을 세웠다. 그에 따라 FHIR 구축에 대한 프로세스와 각 단계마다 도출될 산출물들은 다음과 같이 합의하였다. 분석/설계발주처에 FHIR를 어떻게 구성할 것인지를 밑그림을 그린다. -&gt; 아키텍처 설계 도출 개발발주처의 가상환경(혹은 PC 내)에 오픈소스 HAPI FHIR 시스템를 구축하고, 필요한 각종 API를 개발한다. 그리고 인터페이스 테스트가 가능한 화면을 구성한다. -&gt; 소스코드, 테스트 화면 도출 테스트시스템이 정상 동작하는지, 인터페이스 결과는 문제 없는지 테스트를 수행한다. -&gt; 테스트계획서, 테스트결과서 도출 이관/교육HAPI FHIR 시스템을 구축하는 방법, HAPI를 활용하여 API를 개발하는 방법 등을 제시하고 교육한다. -&gt; 운영자 매뉴얼 (개발 가이드, 환경구축가이드 등 포함) 도출 앞으로 할 일 FHIR 연계가 가능한 기관을 계속 물색할 예정 FHIR 구축에 대한 상세일정 (WBS) 수립 FHIR 분석/설계 진행 끝.","link":"/2020/09/05/fhir-project-plan/"},{"title":"FHIR 정보를 얻을 수 있는 사이트","text":"참고 사이트 FHIR v4.0.1 공식사이트 HL7Wiki : 의료 HL7 표준에 대한 가이드를 게시하는 위키 페이지. FHIR에 대해 관심이 있는 기관과 각 기관의 연구내용에 대한 링크 제공. FHIR 공식 추천 블로그 FHIR Place : Ewout Kramer의 블로그, FHIR 개발 및 구현에 대해 다룬다. Hay on FHIR : David Hay의 블로그, 주로 FHIR 구현 문제를 다룬다. Healthcaresec Privacy : John Moehrke의 블로그, FHIR 및 기타 Motorcycleguy : Keith (Motorcycle Guy) Boone의 블로그, 여러 가지 FHIR을 다룬다. FHIR-BizTalk : Howard Edidin의 블로그, 다른 정보와 함께 FHIR을 다룬다. Lightmyfhir : 다양한 주제를 다루는 MITER Corporation의 FHIR 팀 블로그 AEGIS Insights : 상호 운용성, 테스트 및 기타 관련 주제를 다루는 AEGIS.net, Inc 블로그 사이트 FHIRabend- : 독일의 FHIR에 대한 Simone Heckmann의 블로그 Helios Software : FHIR 및 의료 제품 개발에 대한 Steve Munini의 블로그 fhirbase dojo : FHIR 및 데이터베이스에 대한 그룹 블로그 Nicola on FHIR : Nikolai Ryzhikov (Health Samurai의 CTO) FHIR의 엔지니어 과제에 대한 블로그 HAPI FHIR (오픈소스) 관련 HAPI FHIR - The Open Source FHIR API for Java : Java로 구성된 대표적인 FHIR 오픈소스 소프트웨어 (HAPI) 공식 사이트 씨앤텍시스템즈 기술블로그 :: HAPI FHIR 서버 구축 : HAPI FHIR 구축 사례를 제시하는 기술 블로그 상용 솔루션 관련 Azure API for FHIR이란? - Azure API for FHIR | Microsoft Docs Azure API for FHIR(r) | Microsoft Azure FHIR | Cloud Healthcare API | Google Cloud 기타 (연구결과 등) KIEE - The Transactions of the Korean Institute of Electrical Engineers 산후조리앱 관련 고객중심형 의료정보시스템을 위한 HL7 FHIR 표준기술 활용가이드라인 개발(2차) 끝.","link":"/2020/09/05/fhir-site-info/"},{"title":"모바일 디바이스 선정 가이드","text":"현 프로젝트에서 발주처의 모바일 표준체계를 구축하고 있는데, 다양한 표준들 중에서 모바일 디바이스를 어떻게 선정하면 좋을지 가이드하는 업무가 있어서 정리해보려고 한다. 모바일 디바이스 선정 가이드는, 모바일 앱 개발을 위한 사전준비 단계나 분석설계 단계에서 앱을 지원하는 특정 디바이스 또는 디바이스 지원범위를 적절하게 선정할 수 있도록 하는 것을 목적으로 한다. 즉 모바일 프로세스 전반 중에 모바일 디바이스 선정 가이드를 활용할 수 있는 단계는 다음과 같다. (1) 사전준비 &lt;&lt;&lt;(2) 제안요청(3) 분석설계 &lt;&lt;&lt;(4) 개발(5) 테스트(6) 검수(7) 운영(8) 폐기 업무 담당자가 모바일의 디바이스 종류, 운영체제, 해상도 등의 특징을 이해하고 검토할 수 있도록 가이드는 다음과 같이 구성하였다. 디바이스 선정방안1.1 사용자 환경 고려1.2 정보조회량 고려1.3 가용 사용시간 고려 OS 선정방안2.1 OS 점유율2.2 Android 버전2.3 iOS 버전 해상도 선정방안3.1 Android 해상도3.2 iOS 해상도 별첨. 삼성전자 최근 3년 디바이스 리스트별첨. 애플 최근 3년 디바이스 리스트별첨. 엘지 최근 3년 디바이스 리스트별첨. PDA 제품 선정 방안별첨. PDA 제품 사양 검토 예시 디바이스 선정방안소유 주체에 따른 지원범위크게 보면 구축하고자 하는 앱이 B2B 서비스인지, B2C 서비스인지에 따라 디바이스를 선정하는 방\u001e법은 달라진다. 디바이스가 회사의 자산인 경우(여기서는 B2B라고 하겠다)에 태블릿이나 스마트폰, PDA 중에 특정 디바이스가 서비스 대상이 될 수 있다. B2B가 아니라 불특정 다수의 개인들에게 서비스하는 경우(여기서는 B2C라고 하겠다)에는 불특정한 태블릿과 스마트폰들이 서비스 대상이 될 것이다. 운영체제에 따른 지원범위 B2B 서비스의 경우 특정 디바이스가 선정되면, 해당 디바이스의 운영체제 하에서만 구동되므로 어떤 운영체제에서 지원할 것인지 선정하는 문제는 바로 해결된다. B2C 서비스의 경우는 불특정 다수에게 서비스하기 때문에 기본적으로 Multi-OS 지원이 필요하다. 출시일에 따른 지원범위 일반적으로 B2B의 경우 최근 3년 이내에 출시된 장비를 도입하므로, 검토대상이 최근 3년 내 디바이스로 범위가 좁혀진다. 단, B2C의 경우에는 디바이스 교체주기를 고려하여 지원 디바이스 범위를 선정하여야 한다. 안드로이드의 경우에는 교체주기가 평균 3년, iOS의 경우에는 교체주기가 평균 4년인 것을 감안하여 발주처의 상황에 맞게 적정 범위를 선정하는게 좋겠다. 예를 들어 젊은 층이 사용하는 트렌디한 서비스라면 지원범위가 타이트해도 될 것이고, 많은 연령층이 사용하는 서비스라면 지원범위가 좀더 폭넓어야 할 것이다. 가이드 샘플 디바이스들어가기에 앞서, 샘플 디바이스는 삼성전자의 최근 5개의 기종으로 정하였다. 삼성을 기준으로 잡은 이유는 작년말(2019말) 기준으로 세계 스마트폰 출하량 1위, 태블릿 2위에 오른 대표 브랜드이기 때문이다. 다만, 타 제조사 제품(애플, LG 등)을 도입하려고 해도 동일하게 방법론을 적용할 수 있다. 갤럭시탭 S7+ (태블릿)갤럭시탭 S7 (태블릿)갤럭시탭 A (태블릿)갤럭시 노트20 (스마트폰)갤럭시 S20 (스마트폰) 구분 제품명 제품크기 (mm) 화면크기 (inch) 해상도 (pixel) 무게 (g) 사용시간 (시간) 출시일 태블릿 갤럭시탭 S7+ 285 x 185 12.4 2800 x 1752 575 8 2020-09 태블릿 갤럭시탭 S7 253.8 x 165.3 11 2560 x 1600 498 15 2020-09 태블릿 갤럭시탭 A 210 x 124.4 8 1280 x 800 345 - 2019-10 스마트폰 갤럭시 노트20 161.6 x 75.2 6.6 2400 x 1080 192 16 2020-08 스마트폰 갤럭시 S20 151.7 x 69.1 6.2 3200 x 1440 163 17 2020-03 검토 항목검토 항목은 3가지로, (1) 사용자 환경, (2) 정보조회량, (3) 가용 사용시간이 있다. 사용자 환경 고려 업무활동 반경 또는 이동 반경에 따라 디바이스를 선정한다. 구분 업무활동 반경 / 이동거리가 넓은 경우 업무활동 반경 / 이동거리가 좁은 경우 적정 디바이스 갤럭시 S20, 갤럭시 노트20 갤럭시탭 S7+, 갤럭시탭 S7, 갤럭시탭 A 정보조회량 고려 조회/입력되는 정보량 및 입력 업무 수반 여부, 입력빈도에 따라 디바이스를 선정한다. 구분 정보조회량/입력량/빈도가 많은 경우 정보조회량/입력량/빈도가 적은 경우 적정 디바이스 갤럭시탭 S7+, 갤럭시탭 S7, 갤럭시탭 A 갤럭시 S20, 갤럭시 노트20 가용 사용시간 고려 완충 후 업무 사용시간 및 업무 중 충전 가능여부에 따라 디바이스를 선정한다. 구분 지속 사용시간이 긴 경우 지속 사용시간이 짧은 경우 적정 디바이스 갤럭시탭 S7, 갤럭시 노트20, 갤럭시 S20 갤럭시탭 S7+, 갤럭시탭 A 구분 충전이 가능한 경우 충전이 불가한 경우 적정 디바이스 갤럭시탭 S7+, 갤럭시탭 A 갤럭시탭 S7, 갤럭시 노트20, 갤럭시 S20 OS 선정방안국내 PC 시장의 OS는 사실상 MS Window가 장악하고 있는 것과 대비하여, 모바일에서는 어떤 디바이스를 선택하는가에 따라 OS가 달라질 수 있다. 더군다나 OS에 따라 사용자의 UI/UX부터 개발하는 방식까지 모든게 달라지기 때문에, 사전에 반드시 검토할 필요가 있다. OS 점유율StatCounter에 따르면, 현재 (2020년 9월) 기준으로 세계 시장에서 모바일 OS의 점유율은 다음과 같다.참고: Mobile Operating System Market Share Worldwide | StatCounter Global Stats Android 74.25% iOS 25.15% 그 외 OS 0.6% 즉, Android와 iOS를 지원하게 되면 전체 사용자의 99.6%를 수용할 수 있게 된다. 따라서 국내의 대부분 모바일 서비스들은 Android와 iOS를 지원 대상으로 하고 있다. Android 버전 선정Android 공식 사이트에 따르면, 각각의 버전에 따른 점유율은 다음과 같다. (2020년 08월 22일 기준)출처: 안드로이드 공식 사이트 - 안드로이드 버전별 점유율 Version CodeName Distribution (%) Release Date 9.x Pie 10.4 2018-08-06 8.0.x ~ 8.1.x Oreo 28.4 2017-08-22 7.0.x ~ 7.1.x Nougat 19.2 2016-08-23 6.x Marshmallow 16.9 2015-10-15 5.0.x ~ 5.1.x Lollipop 14.5 2014-10-16 4.4.x Kitkat 6.9 2013-10-31 4.1.x ~ 4.3.x Jelly Bean 3.2 2012-07-09 4.0.x Ice Cream Sandwich 0.3 2011-10-19 2.3.x Gingerbread 0.3 2010-12-06 안드로이드의 지원범위는 전체의 80% 이상을 수용할 수 있도록, Lollipop 이상을 지원한다. iOS 버전 선정Apple 공식 사이트에 따르면, 각각의 버전에 따른 점유율은 다음과 같다. (2020년 08월 22일 기준)출처: App Store - 지원 - Apple Developer - iOS 버전별 점유율 지난 4년간 도입된 아이폰의 OS버전 점유율 Version Distribution (%) Release Date iOS13 92 2019-09-20 iOS12 7 2018-12-18 이하 버전 2 - 전체 아이폰의 OS버전 점유율 Version Distribution (%) Release Date iOS13 81 2019-09-20 iOS12 13 2018-12-18 이하 버전 6 - 아이폰의 지원범위는 전체의 80% 이상을 수용할 수 있도록, iOS 12 이상을 지원한다. 지난 4년간 도입된 아이패드의 OS버전 점유율 Version Distribution (%) Release Date iPadOS 93 2019-06-03 iOS 12 5 2018-12-18 이하 버전 1 - 전체 아이패드의 OS버전 점유율 Version Distribution (%) Release Date iPadOS 73 2019-06-03 iOS 12 16 2018-12-18 이하 버전 11 - 아이패드의 지원범위는 전체의 80% 이상을 수용할 수 있도록, iOS 12와 iPad OS를 지원한다. 해상도 선정방안해상도는 선정된 표준 디바이스를 기준으로, 아래 해상도 테이블을 참고하여 전체의 80% 이상을 지원할 수 있는 범위를 고려하여야 한다. Android 해상도Android의 화면크기에 따른 해상도 점유율을 정리한 자료이다.출처: 안드로이드 공식 사이트 - 안드로이드 버전별 점유율 ldpi mdpi tvdpi hdpi xhdpi xxhdpi Total Small 0.1% 0.1% Normal 0.4% 0.3% 17.0% 41.1% 25.9% Large 1.8% 2.0% 0.7% 2.6% 2.1% Xlarge 3.5% 1.9% 0.5% Total 0.1% 5.7% 2.3% 19.6% 44.3% 28.0% iOS 해상도iPhone 4S ~ iPhone 8 Plus의 해상도 / 연관 디바이스 / 화면크기 / 출시일을 정리한 자료이다.출처: iOS Quick Reference for iPhone, iPad, and Apple Watch iPhone 4S iPhone 5S iPhone 8 iPhone 8 Plus Resolution 640 x 960 640 x 1136 750 x 1334 1242 x 2208 Associated Devices iPhone4 iPhone5, iPhone5c, iPhoneSE iPhone6, iPhone6S, iPhone7, iPhoneSE2 iPhone6Plus, iPhone6SPlus, iPhone7Plus Size (inch) 3.5 4 4.7 5.5 Release 2011-10 2013-09 2017-09 2017-09 iPhone XS Max iPhone 11 iPhone 11 Pro iPhone 11 Pro Max Resolution 1125 x 2436 828 x 1792 1125 x 2436 1242 x 2688 Associated Devices - iPhoneXR iPhoneX, iPhoneXS - Screen Size 6.5 6.1 5.8 6.5 Release 2018-09 2019-09 2019-09 2019-09 참고한 사이트 국내 OS 별, 디바이스별 점유율 :: 꾸준함의 위대함 안드로이드 / android 해상도에 대한 이해 아이폰 전체 해상도 정리 모바일 디바이스별 해상도 및 상세스펙 확인방법 - IT 기획 연구소 모바일 디자인 가이드 – Tarot’s Design &amp; Frontend Dev. 끝.","link":"/2020/09/08/mobile-device-guide/"},{"title":"착수보고 준비 (1&#x2F;2) - 착수보고서 작성","text":"SI 프로젝트에서 착수보고란, 프로젝트의 시작을 알리는 행사다. 보통 프로젝트 투입 후 첫째 주 또는 둘째 주에 진행하고, 프로젝트와 직간접적으로 유관된 부서의 참여자들을 모두 초청한다. 특히 프로젝트의 각종 스폰서(임원들)가 참여하므로 결코 가볍지 않은 행사라고 볼 수 있다. 이 글을 작성하는 이유는, 착수보고라는 것은 어떤 형태로 진행되고, 어떻게 준비해야 하는지 차후 프로젝트를 진행하더라도 혼란이 없도록 기록을 남겨두기 위함이다. 필자는 착수보고라는 것을 처음으로 맞딱뜨린 입장에서 보고서는 어떻게 작성해야 하는지, 보고회는 어떻게 준비해야 하는지 전혀 경험이나 지식이 없었기 때문에 많은 시행착오를 겪을 수밖에 없었다. 부족함이 많았지만 지금 정리해두는 내용을 토대로 다음 번 프로젝트때는 좀더 전문가답게 업무를 진행할 수 있었으면 하는 바람이다. 필자가 생각하기에 착수보고는 크게 3가지의 굵직한 업무로 나뉜다. 착수보고서 작성 착수보고 행사 준비 및 진행 착수보고 발표 여기서, 필자는 1번과 2번의 업무를 담당하였고, 3번은 프로젝트 PM께서 직접 진행하였다. 그래서 필자가 소관하였던 1번과 2번에 대해서만 기록을 남기고, 이번 글에서는 그 중에 1. 착수보고서 작성에 대해서 적어보려 한다. 착수보고서를 작성하기에 앞서먼저, 가장 실수하기 쉬운 부분은, 보고서이기 때문에 뭔가 거창해야 할 것 같지만 착수보고는 정말 심플하고 간단하고 짧아야 한다. 착수보고는 “우리가 이러한 재미있는 프로젝트를 진행하려고 합니다. 여기 계신 여러분들께서 많은 도움이 필요합니다”라는 메시지만 전달이 되면 끝이다. 대체 얼마나 심플해야 하냐고? 필자는 착수보고를 다음과 같이 구성하였다. 무엇을 1.1 사업 개요 1.2 사업 목적 1.3 목표 시스템 어떻게 2.1 추진 방향성 2.2 전체 일정 2.3 조직도 앞으로 3.1 향후 일정 3.2 지원 요청 3.3 우리의 다짐 장표는 각각 1장 씩 총 9장으로 구성되었다. (표지와 마지막 QnA 페이지를 포함하면 11장) 발표로 했을때는 각 장당 약 1분 30초가 소요되니 약 13~15분 정도이다. 사실 작성자의 역량에 따라 더 심플하게 구성할 수 있다면 더 심플하게 가도 된다. (필자가 참고했던 타 샘플 착수보고서는 7장이었다..) 그럼 각각의 장표에는 어떤 내용이 담겨야 하는지에 대해 구체적으로 살펴보자. 무엇을프로젝트의 각종 유관 부서 참여자들을 전부 초대했지만, 안타깝게도 그들은 이 프로젝트에 대해 아직 잘 모른다. 그들에게 차근차근 이 프로젝트가 무엇인지를 설명해주어야 한다. 중요한 것은 쉽게 설명해야 한다는 것이다. 보고서도 물론 아주 쉬워야 한다. 복잡한 내용은 최소화하도록 한다. IT 담당자가 아닌 임원이나 현업 담당자들도 다수 포함되어 있기 때문이다. 먼저 이 사업의 전반적인 개요를 설명하고, 왜 이런 사업이 탄생하였는지 사업의 목적과, 어떤 시스템을 만들 것인지에 대한 밑그림인 목표시스템을 설명한다. 사업 개요사업의 개요에는 5가지의 내용이 담기면 된다. “프로젝트명”이 무엇인지, “수행사”가 어느 회사인지, “참여 인원”들은 몇명인지, “사업 기간”은 언제부터 언제까지인지, “프로젝트룸”은 어디에 위치하였는지. 사업 목적사업의 목적에는 이 프로젝트를 추진하게된 “배경”(고객이 간지러워하는 부분)을 담고, 어떤 방향으로 이를 개선할 것인지 “목적”을 담아내면 된다. 목표 시스템목표 시스템에는 제안서에 담길법한 거창한 인프라 아키텍처를 담는 것은 아니다. 눈높이를 현업 담당자에게 맞춰서, 프로젝트가 끝나면 어떤 시스템들이 구성이 되겠구나 한눈에 들어올 수 있게 그려내면 된다. 어떻게앞에서 무엇을 하겠다는 것을 제시하였으니, 어떻게 그것을 달성해낼 것인지 이야기를 풀어나가면 자연스러울 것이다. 필자의 경우에는 크게 전략과 일정, 조직으로 콘텐츠를 구성하였다. 추진 전략추진 전략 (또는 추진 방향성)에는 프로젝트팀에서 어떤 방향으로 프로젝트를 이끌어나갈 것인지 전략과 실행방안을 간략히 담아내면 된다. 다만 그 전략은 반드시 프로젝트를 성공하기 위한 현실적이면서도 핵심적인 요소여야 한다. 예상컨데 추진전략은 이미 제안서나 제안PT에도 작성을 하였을 것이다. 당부하고 싶은 것은, 제안서와 제안PT를 작성하는 단계에서는 발주처의 상황을 잘 모르고 작성하였기 때문에 뜬구름 잡는 이야기가 많았을 것이다. 그렇기에 착수보고에서는 철저히 발주처의 상황을 고려하여 현실적인 전략이 도출되어야만 한다. 전체 일정프로젝트의 시작부터 끝까지 전체적인 일정을 담아내면 된다. 다만 너무 상세한 일정까지 표현하면 눈에 들어오지 않으므로, 주요한 마일스톤만 잘 찍어주면 된다. 보는 사람 입장에서 “아 ~ 5월부터 개발 시작이구나, 8월부터는 테스트 시작이네? 12월에 오픈하는구나” 이 정도 주요 이정표들만 눈에 들어오면 되겠다. 조직도조직도는, 트리 구조로 프로젝트의 사업단장부터 각 파트별 전문가들까지 가급적이면 모든 사람들이 직책과 실명 위주로 표현되는 것이 좋다. (다만 플젝 인원이 수백명이라 그러면 다 담지는 힘들겠다.. 그땐 다른 방법을 강구해보길) 필자가 수행한 프로젝트의 경우 전체 유관자가 약 40~50명 정도여서 장표 1장에 전부 표현이 가능했다. 가능하다면 발주처 직원과 수행사 직원을 색깔 등으로 구분하여 누가 내 카운터 파트너인지를 확실히 알 수 있으면 더 좋겠다. 앞으로무엇을 어떻게 하겠다는 그림을 앞에서 그려주었으니, 이제는 마무리를 할 단계이다. 이제는 수행사 입장에서 조금의 속내를 드러낼 시간이다. 앞으로는 정말 바쁘게 일을 시작해야 하니 발주처 직원들의 많은 참여를 이끌어내야 한다. 향후 일정당장 내일부터, 또는 당장 다음주부터는 어떤 일들이 벌어질지 이야기가 진행될 수 있도록 장표를 구성한다. 목적은 발주처 현업들의 적극적인 참여를 요청하고 약간의 긴장감(?)을 조성하기 위함이다. 지원 요청비록 첫째 주, 또는 둘째 주밖에 안되었지만, 프로젝트를 막상 시작하려고 하니 많은 어려움이나 제약사항들이 있을 것이다. 프로젝트 스폰서들께 도움을 요청할 것이 있다면 이 시간을 통해 운을 띄워보는 것도 좋은 방법이다. 다만 어디까지나 프로젝트의 시작을 알리는 행사이니 너무 심각한 내용을 담지는 말고, 운을 띄우는 정도로 활용하는 것이 좋다. 혹은 이 프로젝트 성공을 위해 핵심적으로 해결해야 하는 예상 위험요소들을 간략히 담는 것도 좋겠다. 우리의 다짐여느 발표와 마찬가지로 마지막으로 하고 싶은 한마디이다. 열심히 하겠다는 내용도 좋고, 프로젝트팀의 모토나 캐치프레이즈가 있다면 그것을 담아도 괜찮을 것이다. 만약 초반에 발표를 무겁게 시작했다면, 마지막에 분위기를 풀어줄 수 있도록 재치있게 마무리하는 것도 좋겠다. 반대로 초반에 발표를 조금 재치있게 시작했다면 마지막에는 좀더 진중한 멘트로 마무리해도 좋을 것이다. 이 부분은 철저히 보고서 작성자와 PM의 역량에 달려있는 부분이니 설명을 줄이도록 하겠다. 끝.","link":"/2020/08/01/kickoff-report/"},{"title":"제안 작업이란,","text":"2020년 상반기, 감사하게도 회사에서 제안 작업 두 차례 참여하는 업무기회가 주어졌다. 한번은 국내사업(10억 이상 규모)이었고, 한번은 해외사업(500억 이상 규모)였다. 필자는 개발 직군이지만, 1년 내내 개발만 하는 것은 아니다. 개발이 끝나면 각종 산출물들을 작성하고, 새로운 일을 시작하기 전에는 각종 기획서도 작성한다. 더불어 SI 프로젝트를 시작하기 전에는 제안 작업이라는 것을 한다. 제안 작업이란, 발주처에서 발행한 제안요청서(RFP, Request for proposal)를 근거로 제안서를 준비하여 제출하고, 제안PT를 준비하고 제안발표회를 진행하는 제안과 관련된 모든 업무를 뜻한다. 더불어 제안 작업을 한다는 것은 해당 사업이 경쟁입찰이라는 뜻으로 볼 수 있다. 다시 말해, 우리 회사 말고도 이 사업을 따내고자 하는 경쟁사가 있을 가능성이 있다는 것이다. 실제로 진행과정 중에 여러 경쟁사가 발주처의 선택을 받기 위해 영업적으로, 기술적으로 피튀기는 공방을 거친다. 그 과정을 거치고 나면, 발주처에서는 우선협상대상자라는 것을 선정하고, 계약을 진행한 후에 본 사업이 시작된다. 필자는 개발팀의 입장에서 제안 작업이 어떤 프로세스로 진행되는지를 기록하고자 한다. (PM과 영업적인 내용은 배제) 제안작업을 하면서, 필자 스스로 부족한 점을 많이 느꼈다. 앞으로도 살면서 적게는 4~5번, 많게는 10번 이상의 제안을 더 경험하지 않을까 예상하기 때문에, 기록한 내용을 토대로 다음번 제안에서는 더 발전한 결과물을 이끌어냈으면 하는 바람이다. 제안 작업의 전체 프로세스제안 작업은 다음과 같이 크게 두 가지 단계로 나뉜다. (1) 제안서 작성 및 제출 단계(2) 제안PT 준비 및 발표 단계 먼저, 제안서를 작성하고 제출하는 단계가 있다. 제안서는 적게는 200페이지, 많게는 3,000페이지가 넘는 경우가 있을 정도로 방대한 분량의 문서이다. 그러나 안타깝게도 제안팀에게 주어지는 시간은 짧게는 겨우 2주, 길게는 4~5주 뿐이다. 그 시간 안에 무에서 유를 창조하기 위해 제안팀은 매일 밤을 지새우는 강도높은 작업을 수행하기도 한다. 제안서를 제출하고 나면, 곧바로 제안발표회라는 일정이 잡힌다. 제안발표회란, 고객들에게 제안한 내용을 간략히 발표하고 평가를 받는 행사이다. 이를 위해 제안PT를 준비하고 발표하는 단계를 진행한다. 제안PT란 짧게는 10분, 길게는 30분 이상을 발표해야 하는 고통스러운 일이다. 발표는 보통 PM이 진행하지만, 그 뒷단에서 발표자료를 만들고, QnA를 준비하는 등의 업무를 담당하는 여러 담당자들이 존재한다. 제안서 작성 및 제출 단계제안서 작성 및 제출 단계는 [준비] - [작성] - [검수] - [제출] 순으로 상세 21개 프로세스로 구성된다. 사업의 특성에 따라 이 프로세스는 간소화될 수도 있고 혹은 더 복잡해질 수도 있으나, 필자가 생각하는 필수적인 프로세스를 모두 담았다. 준비 킥오프 (제안팀 구성, 협력구도 선정) RFP 분석 최근 제안서 / 유사 제안서 수급 제안 템플릿 제작 의뢰 (to 디자이너) 제안 스토리보드 및 WBS 작성 + 제안전략 도출 제안서 작성의 R&amp;R 정리 작성 작성 시작 작성 후 취합 조견표 작성 상급자 리뷰 (영문 제안의 경우) 번역 (to 번역가 또는 번역가능한 직원) (영문 제안의 경우) 번역본 검수 (to 외국인직원) 제안서 디자인 작업 의뢰 (to 디자이너) 검수 검수 1차 (소프트카피) 검수 2차 (하드카피) 검수 3차 (출력 직전 제본소에서) 제출본 출력 (to 제본소) 제출본 최종 검수 영업자료+기술자료 취합 제출 패키징 제출 (필요시 해외발송) 제안PT 준비 및 발표 단계제안PT 준비 및 발표 단계는 [준비] - [장표작성] - [발표회준비] - [발표회진행] 순으로 상세 15개 프로세스로 구성된다. 위와 마찬가지로 사업의 특성에 따라 이 프로세스는 간소화될 수도 있고 혹은 더 복잡해질 수도 있으나, 필자가 생각하는 필수적인 프로세스를 모두 담았다. 준비 샘플 제안PT / 유사 제안PT 수급 제안PT 템플릿 제작 (to 디자이너) 제안PT 스토리보드 작성 + 제안전략 도출 제안PT R&amp;R 정리 장표 작성 작성 시작 작성 후 취합 제안PT 장표 리뷰 제안PT 디자인 작업 의뢰 (to 디자이너) 발표회 준비 발표 스크립트 작성 예상 QnA 작성 제안PT 발표 리허설 1차 (팀원 대상) 제안PT 발표 리허설 2차 (영업팀 대상) 제안PT 발표 리허설 3차 (임원 대상) 발표회 진행 발표본 출력 제안발표회 진행 각각의 단계에서 유의해야 할 점은 다른 글에서 다루도록 하겠다. 끝.","link":"/2020/09/27/proposal-process/"},{"title":"레드마인 기타 기능 설계하기","text":"레드마인과 관련된 글은 다음과 같이 5편으로 구성된다. 본 글에서는 3. 레드마인 기타 기능 설계하기에 대해 다룬다. 레드마인 설치하기 레드마인 그룹 설계하기 레드마인 기타 기능 설계하기 레드마인 일감 프로세스 설계하기 레드마인 일감 상세 설계하기 (작성중) 레드마인에는 “일감”이라고 하는 강력한 메인 기능이 있다. 하지만 그 외로도 뉴스, 문서, 위키, 게시판, 파일 등 매우 다양한 기능들을 제공하고 있다. 이를 잘만 활용한다면 레드마인이 단지 결함관리시스템, 이슈추적시스템이 아니라 프로젝트 참여자들이 업무적으로 소통할 수 있는 커뮤니티로도 정착될 수 있을듯하다. 뉴스뉴스는, 레드마인 사용자들에게 공지사항을 작성하는 기능이다. 기능은 별도 커스터마이징하지 않고, 다만 어떤 목적으로 사용할 것인지 정의가 필요하다. 업무와 관련된 공지사항을 등록할 것인지, 아니면 경조사에 대한 공지사항을 등록할 것인지 이것은 필요에 따라 취사선택한다. Ex. 업무 공지, 회의 공지, 테스트 공지, 경조사 공지 등 이를 선택할 때 고려해야 할 사항은 다음과 같다. 메일처럼 수신자/참조자가 뚜렷하게 있는 것이 아니기에 공지사항에 등록했다고 모두가 유심히 살펴보진 않을 수 있다는 것이다. 수행사 뿐 아니라 고객도 보는 창구이다. 사용자들이 레드마인에 상시 접속하는 것이 아니기 때문에 공지사항을 확인하는데는 시간이 걸린다. 문서문서는, 여러가지 문서파일을 게시글 형태로 묶어서 업로드할 수 있는 기능이다. 예를 들어, “각종 가이드 문서 배포”라는 제목의 글을 쓰고, 그 글에 A 가이드, B 가이드, C 가이드 등 여러 문서를 첨부할 수 있는 형태라고 보면 된다. 어떤 문서를 업로드할 것인지는 레드마인의 목적에 따라, 프로젝트의 상황에 따라 역시 취사선택하면 되겠다. 필자가 생각하기에는 다음과 같은 가이드 문서들을 올리면 사용자들이 필요할 때마다 참고할 수 있을 듯하다. 다만, 레드마인에 업로드하였을 때 보안 상에 문제는 없을지 반드시 검토하기 바란다. Ex1. 레드마인 사용법 가이드Ex2. 테스트 품질 지표Ex3. 단위 테스트, 통합 테스트 가이드 문서Ex4. 통합 테스트 시나리오등 위키레드마인에는 위키를 작성할 수 있는 기능이 있다. 별도로 DokuWiki 등을 구축하지 않아도 위키를 사용할 수 있으니 레드마인 하나로 두마리 토끼를 잡을 수 있는 편리한 기능인 것 같다. (다만, DokuWiki 수준의 다양한 기능을 제공하지는 않는 것 같아 아쉬움은 있다.) 간단하게 사용한다면, 레드마인 사용법 가이드 혹은 레드마인 운영 규칙 정도를 작성해두어도 좋을 것 같고, 조금 더 넓은 범위로 사용한다면, 개발가이드나 환경구축 가이드, 소프트웨어 설치 가이드 등을 작성할 수 있을 듯하다. 역시 보안 상에 문제가 없을지를 반드시 검토한 후에 사용하길 바란다. Ex1. 레드마인 사용법 가이드, 레드마인 운영규칙, 회원관리 규칙 등Ex2. 개발가이드, 환경구축 가이드, 소프트웨어 설치 가이드 등 게시판게시판은, 목적에 따라 여러가지 게시판을 구분하여 만들고 운영할 수 있는 기능이다. 게시판이라는 곳은 커뮤니티가 될 수도 있고, 가상의 회의실이 될 수도 있고, 의견을 나누는 아고라가 될 수도 있다. 용도는 너무나도 다양하기 때문에, 게시판을 만드는 사람의 아이디어나 의도가 가장 중요하겠다. 필자는 게시판을 다음과 같이 활용하면 어떨까 고민해보았다. Ex1. 건의사항 게시판: 프로젝트 또는 업무와 관련한 다양한 건의사항을 게시하고 답변을 받을 수 있는 공간Ex2. 위험이슈 관리 게시판: 각종 위험이슈를 등록하고, 진척사항을 추적/업데이트하는 공간Ex3. Q&amp;A 게시판: 타파트에 궁금한 것이 있을 때, 질문을 올리고 답변을 받을 수 있는 공간등 파일파일은, 파일 1개 단위로 업로드할 수 있는 기능이다. 위에서 설명한 [문서] 기능과 유사하면서도 다르다. 파일을 1개 단위로 업로드하기 때문에 너무 많은 파일들이 올라가면 페이지수가 여러장으로 늘어나면서 나중에는 찾기 어려워지는 문제가 발생할 수 있다. 그래서 중요한 파일들만 올리는 용도로 사용하는 것이 좋겠다. 혹은 누군가와 주고받아야 하는 파일이 있는데 메일로는 용량이 너무 커서 보내기 어려울 때, 이 기능을 활용하여 파일을 공유하고, 일정 시간이 지나면 지우는 것도 방법이 되겠다. Ex. 소스파일, 소프트웨어 설치파일, 이미지 파일 등 끝.","link":"/2020/08/18/redmine-etc/"},{"title":"레드마인 그룹 설계하기","text":"레드마인과 관련된 글은 다음과 같이 5편으로 구성된다. 본 글에서는 2. 레드마인 그룹 설계하기에 대해 다룬다. 레드마인 설치하기 레드마인 그룹 설계하기 레드마인 기타 기능 설계하기 레드마인 일감 프로세스 설계하기 레드마인 일감 상세 설계하기 (작성중) 레드마인에는 회원을 관리하는 유용한 기능이 있다. 회원들을 그룹핑할 수도 있고, 해당 그룹에는 특정한 권한 범위를 설정할 수도 있다. 회원관리 기능 사용법에 대해서는 생활코딩 &gt; 프로젝트관리 &gt; 레드마인 &gt; 회원 &gt; 회원관리에 자세하게 소개되어 있어서 참고하면 된다. 필자 본인이 속해 있는 개발 프로젝트에는, 여느 SI 프로젝트와 같이 다양한 참여자들이 존재하였고, 각각의 R&amp;R에 따라 레드마인에서도 권한과 활동범위를 지정해줄 필요성이 있었다. 필자는 다음과 같이 그룹을 구분지었다. 레드마인 관리자 PMO 현업 TF 수행사 PL (Part Leader) 수행사 개발팀 기간계 개발팀 (선택 사항) 각 그룹의 역할과 권한에 대해서는 아래에 구체적으로 설명하겠다. 레드마인 관리자레드마인 관리자는, 말 그대로 레드마인 시스템을 관리하고 운영하는 사람을 말한다. 레드마인의 모든 권한이 열려있는 “슈퍼 유저”라고 볼 수도 있겠다. 회원관리/생성/수정/삭제부터 프로젝트 관리/생성/수정/삭제, 게시판 관리/생성/수정/삭제, 일감 관리/생성/수정/삭제 등의 모든 권한을 가지도록 했다. 프로젝트 중에는 필자 본인이 [레드마인 관리자]의 역할을 맡았으나, 추후에 레드마인은 고객사에 인도해야 하기 때문에 해당 프로젝트 발주처 부서의 담당자도 레드마인 관리자로 등록하였다. 레드마인 전체 권한 소유(레드마인 설정, 프로젝트 생성, 게시판 생성, 회원 등록, 뉴스 공지, 일감 등록/삭제/수정 등) PMOPMO는 Project Management Office의 약자로, 프로젝트 관리의 롤을 맡은 다양한 참여자들이다. 필자가 속한 프로젝트에서는 발주처 쪽에서 PM과 사업관리, 그리고 해당 프로젝트의 스폰서들까지 총 5명이 있었고, 수행사 쪽에서는 PM과 사업관리 2명이 있었다. 이들은 사실 레드마인에서 특별하게 Action을 하는 일은 없으나, 레드마인을 통해 현업 및 수행팀의 업무 진척상황들을 모니터링하고, 이슈가 발생하였다면 그것을 해결하고, 레드마인 데이터를 엑셀로 내려받아 각종 프로젝트 품질지표를 측정하는 역할을 하는 사람들이다. 참고: PMO란? : 네이버 블로그 해당 프로젝트의 전체 권한 소유(게시판 생성, 뉴스 공지, 일감 등록/삭제/수정 등) 현업 TFTF란 Task Force를 뜻하고, 발주처의 직원들 중에 일부 프로젝트를 지원하기 위해 구성된 현장의 전문가 조직을, 현업 TF라고 부르는 경우가 많다. 이들의 역할은 AS-IS 시스템의 주사용자 입장에서 TO-BE 시스템에서 개선되어야 할 것들의 요구사항을 제시하고, 시스템이 구축된 이후에는 해당 요구사항대로 잘 구현이 되었는지를 테스트하는 것이다. 즉, 테스트 결과를 레드마인에 입력하고, 테스트가 실패하였다면 어떤 지점에서 에러가 발생하였는지 결함을 등록하게 될 것이다. 그리고 결함이 수정되었다면 테스트를 통해 시스템이 올바르게 동작하는지를 점검하는 역할까지 수행하게 된다. 일감 등록, 편집 (+본인이 등록한 글은 삭제 가능)게시판 글 작성, 댓글 달기 수행사 PLPL이란, Part Leader로 주로 수행사에서 개발팀을 리딩하는 역할을 하는 사람이다. 위에서 설명한 현업 TF와 주로 소통하며, 소통한 내용을 토대로 수행사 개발팀(설계자, 개발자, 디자이너)에게 각종 업무를 할당하게 된다. 또한 현업 TF와 함께 테스트를 수행하는 주체가 되기도 하며, 직접 결함을 등록하기도 한다. 현업 TF를 통해 결함이 보고되었을 때 이것이 결함이 맞는지를 점검하고, 해당 프로그램을 담당하는 개발자에게 결함조치를 할당하는 역할을 한다. 참고: IT용어 개발자, PL, PM, IT 컨설턴트 상세 설명 : 네이버 블로그 일감 등록, 편집 (+본인이 등록한 글은 삭제 가능)뉴스 공지, 게시판 글 작성, 댓글 달기 수행사 개발팀수행사 개발팀이란, 설계자, 개발자, 디자이너 등이 소속된 수행사의 개발조직이다. 프로그램을 설계하고 개발하는 주체이며, 수행사 PL을 통해 각종 업무를 할당받게 된다. 일감 등록, 편집 (+본인이 등록한 글은 삭제 가능)게시판 글 작성, 댓글 달기 기간계 개발팀 (선택사항)기간계 개발팀이란, 발주처에 구축되어 있는 각종 시스템을 운영하고 개발하는 발주처 소속의 개발팀이다. 이들은 발주처 직원일수도 있고 때로는 아웃소싱 조직일 수도 있다. 선택사항이라고 표시한 이유는, 우리 시스템에서 기간계 시스템과 인터페이스하는 프로그램이 전혀 없거나, 또는 얼마 없다면 굳이 레드마인에 기간계 개발팀을 초대할 필요가 없이 직접 다이렉트로 소통하는게 낫기 때문이다. 다만, 기간계와 인터페이스하는 프로그램이 상당부분 존재하고, 그것이 프로젝트 성공에 큰 영향이 있다면, 레드마인 내에도 이들 그룹을 초대하여 진척에 대해 관리하는 것이 바람직할 것이다. 일감 편집 가능 끝.","link":"/2020/08/16/redmine-group/"},{"title":"착수보고 준비 (2&#x2F;2) - 착수보고 행사 준비 및 진행","text":"착수보고의 굵직한 3가지 업무 중 2. 착수보고 행사 준비 및 진행에 대해 기록을 남기려 한다. 1. 착수보고서 작성과 관련해서는 이전 글을 참고하기 바란다. 필자는 착수보고 행사를 체크리스트 형태로 만들어서 누락이 발생하지 않도록 계획하고, 당일까지 체크리스트를 관리하였다. 개요 보고의 목적을 파악했는가? Ex. 프로젝트의 시작을 알리고, 그 동안의 진행경과를 보고하는 것이다. 참석 대상과 인원을 파악했는가? (이를 토대로 회의장소 및 식사장소, 예산 등을 잡아야 하니 중요함) Ex. 발주처 스폰서 3명, A~Z팀 팀장급 이상 15명, 담당자 16명, 수행사 15명, 수행사 스폰서 5명, 협력사 스폰서 5명) 행사 일시는 언제인가? Ex. 2020년 08월 01일 10:00 ~ 11:00 행사 장소는 어디인가? Ex. A동 10층 컨퍼런스홀 행사의 진행자는 누구인가? Ex. 발주처 PM (보통은 발주처의 PM이 맡는 경우가 많으니, 발주처 PM에게 사전에 요청하는 것이 좋음) 행사 식순은? Ex.(1) 사업단장 인사말(2) 수행사 임원 인사말(3) 착수보고 (수행사 PM)(4) Q&amp;A(5) 각 영역별 담당자 소개 및 다과회(6) 종료 보고 관련 목차를 확정하였는가? 각 업무영역에서 작성해주어야 하는 내용이 있는가? 그렇다면 요청하였는가? 보고서 작성이 완료되었는가? 보고서를 수행사 본사에 사전 보고하고 검토받았는가? 보고서를 발주처에 검토받았는가? 식사/다과 관련 가용 예산은 얼마인가? (PM 통해 확인) 식사/회식/다과 중 어떤 형태로 진행할 것인지? Ex. 코로나로 인해 다과회만 진행하고, 스폰서들만 점심식사 진행 다과 또는 식사/회식 예약 후보지 물색 Ex. A 제과점, B 제과점Ex. A 중식당, B 한식당 예약 진행 (필요하다면 메뉴까지 예약) 공지 참석자 전체 명단을 확보했는가? 행사 장소 약도를 확보했는가? 주차 가능 공간을 확인했는가? 참석자 전원에게 참석요청 공지 발송 (행사장 약도와 보고자료, 주차가능공간 등 별도 첨부) 행사환경 사전점검 홀/회의실 좌석수는 넉넉한가? 빔프로젝터/마이크는 문제 없는가? 장소가 깨끗한가? (가능하다면) 보고 리허설을 1회 이상 진행하였는가? 당일 발표용 프리젠터를 준비하였는가? 행사 안내표지를 부착하였는가? (행사장 입구에 부착) 보고자료를 행사장 PC로 내려받았는가? 행사장 입구에 다과를 세팅하였는가? 손소독제를 비치하였는가? (코로나로 인해) 행사장 입구에 보고자료 (하드카피)를 세팅하였는가? 쓰레기통을 준비하였는가? 끝.","link":"/2020/08/02/kickoff-prepare/"},{"title":"레드마인 설치하기","text":"프로젝트 수행 중에 레드마인을 직접 세팅하고 커스터마이징해볼 기회가 생겨서 추후 다른 프로젝트에서 활용할 때도 참고할 수 있도록 기록을 남겨두고자 한다. 레드마인과 관련된 글은 다음과 같이 5편으로 구성된다. 본 글에서는 1. 레드마인 설치하기에 대해 다룬다. 레드마인 설치하기 레드마인 그룹 설계하기 레드마인 기타 기능 설계하기 레드마인 일감 프로세스 설계하기 레드마인 일감 상세 설계하기 (작성중) 설치 설치는 레드마인 설치 따라하기 (Windows 7/10)를 참고하여 진행하였다. 설치파일은 Bitnami - Download Redmine에서 다운로드 가능하다. 추후 리눅스에 설치하는 경우에는, Bitnami에서 제공하는 Docker를 활용한 레드마인 설치를 참고하면 될 듯하다. 레드마인 사용법 감사하게도 레드마인의 대부분의 사용법은 생활코딩 사이트에 교육영상이 있다. 생활코딩 &gt; 프로젝트관리도구 &gt; 레드마인을 참고하여 약 1시간 정도 공부하니 설치부터, 주요기능, 회원, 프로젝트, 일감, 로드맵, 위키, 저장소 기능에 대해 익힐 수 있었다. 레드마인을 커스터마이징하고자 한다면 반드시 사용자 정의항목을 맞딱뜨리게 될 것이다. 즉, 일감의 하위 입력 필드는 사용자의 필요에 따라 커스터마이징할 수 있다. 필자는 사용자 정의 항목 추가하기 블로그를 참고하여 진행하였다. 테마 적용기본 테마가 밋밋하다면, 테마 적용 따라하기를 참고하여 색다른 테마를 입혀볼 것을 추천한다. 레드마인에서 제공하는 Theme List - Redmine에서 전체 테마리스트를 볼 수 있다. 가장 인기있는 테마는 A1, PurpleMine2 등이 있다. 필자는 Flatly_light_redmine 테마를 활용하였다. Plug-In 설치레드마인에서 제공하는 각종 추가 기능을 활용하고 싶다면, 레드마인 공식 플러그인 리스트를 참고하면 된다. 전체 플러그인이 다 필요하지는 않을테니, 이 중에서 입맛에 맞게 설치하여 쓰면 된다. 다만, 그동안 레드마인을 써본 유저들이 주로 추천하는 플러그인들이 있어 링크 남기도록 하겠다. 유용한 플러그인 Top 5, 유용한 플러그인 Top 10 레드마인 플러그인 설치 따라하기 플러그인을 다운로드 받은 후에는 아래 명령어를 통해 서버에 반영이 가능하다. 12bundle install --without development test --no-deploymentbundle exec rake redmine:plugins NAME=redmine_agile RAILS_ENV=production 그 외서버 이전이 필요한 경우에는 서버 이전하기 - 잡동사니 블로그를 참고한다. 끝.","link":"/2020/08/15/redmine-setup/"},{"title":"레드마인 일감 프로세스 설계하기","text":"레드마인과 관련된 글은 다음과 같이 5편으로 구성된다. 본 글에서는 4. 레드마인 일감 프로세스 설계하기에 대해 다룬다. 레드마인 설치하기 레드마인 그룹 설계하기 레드마인 기타 기능 설계하기 레드마인 일감 프로세스 설계하기 레드마인 일감 상세 설계하기 (작성중) 레드마인의 가장 강력한 기능인 “일감”을 제대로 다루기 위해서는, 먼저 일감을 누가 어떻게 시작하고 진행하고 종료할 것인지 프로세스를 잡아야 한다. 레드마인은 거의 모든 것을 커스터마이징할 수 있도록 개방적으로 프로그램이 설계되어 있기 때문에, 프로세스를 어떻게 잡아야 하는지를 전적으로 사용자가 원하는대로 정해도 된다. 프로그램을 수정하는 것은 프로세스를 잡은 다음에 고민해도 된다. 필자는 일단 일감을 결함으로 한정하고, 프로세스를 다음과 같이 대표적으로 5가지 케이스로 나누었다. 프로세스는 어떤 발주처와 프로젝트를 진행하느냐에 따라, 혹은 어떤 구성원들과 일하느냐에 따라 언제나 변경될 수 있기 때문에 참고용으로만 의미가 있을 것이다. (즉, 안타깝지만 다른 프로젝트에서는 어차피 재설계해야 한다.) 기본 프로세스 수행사 자체진행 프로세스 조치불가 프로세스 거절 프로세스 결함 재접수 프로세스 기본 프로세스결함이 정상적으로 처리되는 기본 프로세스이다. 대부분의 결함은 이 프로세스대로 처리될 것이다. 현업TF에서 결함을 신규등록하고, PL은 해당 결함을 담당 개발자에게 할당한다. 개발자는 결함을 할당받아 결함을 조치한다. 조치가 완료된 결함은 PL이 중간테스트를 진행한다. 중간테스트가 통과하면 최종적으로 현업TF에서 최종테스트를 진행한다. 문제가 없으면 결함은 종료된다. 담당자 현업TF PL 개발자 개발자 PL PL 현업TF 현업TF 일감의 상태 신규 -&gt; 진행 조치완료 -&gt; 중간완료 -&gt; 최종완료 Action 결함등록 개발자 지정 결함 조치 결함 해결 PL테스트 시작 PL 테스트 완료 현업테스트 시작 현업테스트 완료 수행사 자체진행 프로세스발주처에서 관여하지 않고 수행사에서 자체적으로 진행하는 프로세스이다. 기본 프로세스에서 “현업TF”가 빠진 케이스라고 보면 된다. 이는 다시 두 가지 케이스 나뉠 수 있는데, 첫번째, PL이 결함을 발견하고 등록하는 케이스와, 두번째, 개발자가 스스로 결함을 발견하고 등록하는 케이스이다. PL이 결함을 등록하는 케이스PL이 결함을 발견한 경우이고, PL이 결함을 등록하는 것부터 프로세스가 시작된다. 담당자 PL 개발자 개발자 PL PL 일감의 상태 신규 진행 조치완료 -&gt; 최종완료 Action 결함등록, 개발자 지정 결함 조치 결함 해결 PL테스트 시작 PL 테스트 완료 개발자가 결함을 등록하는 케이스개발자가 결함을 발견한 경우이고, 개발자가 결함을 등록하는 것부터 프로세스가 시작된다. 담당자 개발자 개발자 개발자 PL PL 일감의 상태 신규 진행 조치완료 -&gt; 최종완료 Action 결함등록 개발자 본인 지정, 결함 조치 결함 해결 PL테스트 시작 PL 테스트 완료 조치불가 프로세스때때로 다양한 사유로 조치가 불가한 경우들이 발생한다. 그것이 기술적인 사유일 때도 있고, 정책적인 사유일 수도 있다. 그럴 때에는 다음과 같은 프로세스로 진행된다. 담당자 현업TF PL 개발자 개발자 PL PL 일감의 상태 신규 -&gt; 진행 의견 -&gt; 조치불가 Action 결함등록 개발자 지정 결함 조치 조치불가 의견 작성 PL 검토 PL 의사결정 거절 프로세스결함이 등록되었으나 이것이 사업범위를 넘어서는 요구사항일 경우에는, 수행사에서 조치를 거절하는 경우도 발생한다. 이는 다시 두 가지 케이스로 나뉠 수 있는데, 첫번째, PL이 즉시 거절하는 케이스와, 두번째, 개발자 확인 후 거절하는 케이스이다. PL이 즉시 거절하는 케이스최초로 결함을 검토한 PL이 즉시 결함처리를 거절하는 케이스이다. 담당자 현업TF PL PL 일감의 상태 신규 -&gt; 거절 Action 결함등록 PL 검토 PL 의사결정 개발자 확인 후 거절하는 케이스PL은 결함을 개발자에게 할당하였으나, 개발자가 검토하여 다시 PL에게 의견을 보고하고, 보고받은 PL이 결함처리를 거절하는 케이스이다. 담당자 현업TF PL 개발자 개발자 PL PL 일감의 상태 신규 -&gt; 진행 의견 -&gt; 거절 Action 결함등록 개발자 지정 결함 조치 거절 의견 작성 PL 검토 PL 의사결정 결함 재접수 프로세스개발자가 결함을 조치완료하였지만, 테스트 중에 결함이 재발생하는 경우들이 있다. (제대로 조치가 안되었거나, 조치했지만 다른 에러 케이스가 발생하는 경우 등등) 이는 다시 두 가지 케이스 나뉠 수 있는데, 첫번째, PL테스트 실패 후 결함 재접수 케이스와, 두번째, 현업테스트 실패 후 결함 재접수 케이스이다. PL테스트 실패 후 결함 재접수 케이스개발자가 조치완료 후 PL이 테스트 중에 결함을 발견하여, 다시 개발자에게 결함을 재접수하는 케이스이다. 담당자 현업TF PL 개발자 개발자 PL PL 개발자 일감의 상태 신규 -&gt; 진행 조치완료 -&gt; 진행 진행 Action 결함등록 개발자 지정 결함 조치 결함 해결 PL테스트 시작 PL테스트 실패, 결함 재접수 결함 재조치 시작 현업테스트 실패 후 결함 재접수 케이스개발자가 조치완료 후 현업TF가 테스트 중에 결함을 발견하여, 다시 개발자에게 결함을 재접수하는 케이스이다. 담당자 현업TF PL 개발자 개발자 PL PL 현업TF 현업TF 개발자 일감의 상태 신규 -&gt; 진행 조치완료 -&gt; 중간완료 -&gt; 진행 진행 Action 결함등록 개발자 지정 결함 조치 결함 해결 PL테스트 시작 PL 테스트 완료 현업테스트 시작 현업테스트 실패, 결함 재접수 결함 재조치 시작 끝.","link":"/2020/08/20/remine-process-design/"},{"title":"업무일지 2020년 09월 3주차","text":"2020년 9월 3주차 개인 업무일지이다. 언제 어떤 일들을 했는지 기억하기 위하여 남긴다. Schedule2020.09.14.월 시스템 아키텍처 내부회의 1차 (09:00 ~ 09:40) FHIR 환경 구축 가이드 작성 (HAPI-FHIR jpaserver 구성) 시스템 아키텍처 내부회의 2차 (14:00 ~ 15:00) 2020.09.15.화 FHIR 환경구축 가이드 작성 (Word 버전) FHIR 환경구축 가이드 초안 v0.1 내부 공유 2020.09.16.수 FHIR 로컬 클라이언트 환경 구축 FHIR 로컬환경 테스트 FHIR 환경구축 가이드 수정본 v0.2 내부 공유 FHIR 테스트 진행방안 회의 with jyh 2020.09.17.목 주간보고 내부 리뷰 FHIR 리소스 Create/Read/Update/Delete 패턴 분석 2020.09.18.금 UI/UX 표준가이드 검수 MySQL super_read_only 관련 서칭 HAPI-FHIR 신규버전 (5.2.0) 설치 및 테스트 FHIR 환경구축 가이드 보완 및 공유 잘한 점/개선사항/배운 점 협업 업무를 할때, 협업 파트너와 생각의 싱크를 계속 맞추는 것이 중요하다. 생각의 싱크를 맞추지 않고 내 생각대로만 밀고 나가면, 상대방은 내 이해력이 부족하거나 혹은 독단적인 스타일이라고 판단할 수 있다. 그리고 생각의 싱크는 반드시 대화와 자료를 통해서 맞추어져야 한다. 내가 무슨 일을 어떻게 하고 있는지 주변 사람들이 알 수 있도록 계속해서 공유하는 것이 좋다. 이것도 일종의 생각의 싱크를 맞추는 작업이라고 볼 수 있다. 공유는 입으로만 하지 말고 반드시 자료/결과물과 함께 이야기하는 것이 좋다. 사소하더라도 동료에게 좋은 일(긍정적인 변화)이 생겼다면, 주변 사람들에게 공유하고 축하받을 수 있도록 하자. (시험 합격, 가족행사 등) 화면설계에 들어가기 전에 앞서, 업무 프로세스부터 정의하고 시작하는 것이 좋다. 업무 프로세스를 정의하지 않으면 추후 화면설계가 뒤틀릴 가능성이 높다. (즉, 프로세스가 잡히지 않았는데 화면이 먼저 나오는 것은 순서가 맞지 않다) 고객이 프로세스를 잡지 않았다면, 먼저 잡고 갈 수 있도록 리딩해줄 필요가 있다. 뭔가에 대한 피드백을 꼭 원하면, 전체메일로 보내지말고 특정인을 지정해서 보내는 것이 좋다. 전체공지처럼 보내면, 담당자가 불분명하고 책임소지가 분산되기 때문에 아무도 회신이 오지 않을 가능성이 높다. (반대로, 아무도 회신이 오지 않고 조용히 넘어가기를 바란다면 전체공지를 하는 것이 오히려 전략적인 방법일 수 있다) 끝.","link":"/2020/09/18/work_202009_3/"},{"title":"업무일지 2020년 09월 2주차","text":"2020년 9월 2주차 개인 업무일지이다. 언제 어떤 일들을 했는지 기억하기 위하여 남긴다. Schedule2020.09.07.월 대상 단말 선정 가이드 리뷰 및 보완 2020.09.08.화 FHIR 소프트웨어 구성, 서버 아키텍처 구성 검토 FHIR 아키텍처 설계서 (시스템 구성도) 작성 FHIR 아키텍처 설계 내부회의 (14:30 ~ 15:30) FHIR 로컬환경 설치 - hapi-fhir-jpa-server config 2020.09.09.수 FHIR 로컬환경 설치 * FHIR 로컬환경 설치 - MySQL innoDB sandbox cluster 테스트, innoDB classic 테스트 FHIR 3098 에러 서칭 2020.09.10.목금일은 해외 컨퍼런스콜이 있어 본사로 출근. ITRS 제안서 및 기술PT 준비 지원 기술 컨설턴트와 사전 미팅 ITRS 기술PT 및 질의응답 컨퍼런스콜 (12:00 ~ 14:00) 2020.09.11.금 FHIR 로컬 테스트 및 에러 추적 FHIR 환경구축 가이드 작성 잘한 점/개선사항/배운 점 항상 명확한 근거(이유) 중심으로 생각하고 일할 것. 왜 이렇게 했는지? “그냥”, “쉬워서”, “편해서”는 설득력 있는 방식이 아니다. 업무의 우선순위와 마감기한을 정하고 진행할 것. 다만, 내가 생각하는 우선순위와 상사가 생각하는 우선순위가 간혹 다를 수 있다. 그 싱크를 잘 맞춰가면서 혼란을 줄이자. “이거 이상한데?” 싶은 것들을 그냥 지나치지 말자. 경험이 많은 분들에게 질문과 검토요청을 귀찮을 정도로 해야만 내가 하나라도 더 배울 수 있\u001d다. 옆 사람이 고민하고 있는 문제는 함께 관심을 가지고 고민해주는 것이 좋다. 머리를 맞대면 분명 더 좋은 방법이 보이기 마련이다. 또한 도움을 받았던 사람은 다음 번에 어떤 방법으로든 반대로 도움을 줄 것이다. 누군가에게 요청할 것이 있을 때는 반드시 미리 이야기하자. 부탁할 사람에게 급작스런 업무로드가 발생하지 않도록 하는 것이 비즈니스 매너이다. 반대로, 갑작스럽 요청이 잦아지면 그 사람과는 다음 번에 같이 일하기 싫어질 수 있다는 것을 유념하자. 멀티태스킹보다 한가지 업무에 몰입하는 것이 오히려 높은 생산성을 낼 수 있다. (참고: 여러가지 업무 전환 ‘멀티태스킹’, 생산성 떨어뜨린다 : 네이버 포스트) 다양한 업무들에 호기심이 생기겠지만 현재 메인으로 맡고 있는 업무가 가장 중요하고 거기에 힘을 집중하도록 하자. 끝.","link":"/2020/09/11/work_202009_2/"},{"title":"업무일지 2020년 09월 1주차","text":"2020년 9월 1주차 개인 업무일지이다. 언제 어떤 일들을 했는지 기억하기 위하여 남긴다. Schedule2020.09.01.화 모바일 OSA 내부 정리 회의 (10:20 ~ 11:30) FHIR 내부 정리 회의 (13:00 ~ 14:00) 모바일 OSA 내부 정리 회의 (14:00 ~ 16:00) FHIR 협업 시작 with JYH, 진행경과 인수인계 받음 (16:40 ~ 17:40) 2020.09.02.수 FHIR 진행방안 사전 논의 with JYH FHIR 전체 범위 조사 with JYH FHIR 진행방안 자료작성 FHIR 진행방안 내부 검토 with PL님, PM님 (16:30 ~ 17:30) FHIR 진행방안 최종 수정 및 전체 공유 2020.09.03.목 모바일 OSA To-Be 구성방안 작성 주간보고 리뷰 (13:00 ~ 14:00) FHIR 진행방안 및 모바일 OSA To-Be 구성방안 보고 (15:00 ~ 16:00) 모바일 표준체계 가이드 리뷰 회의 (16:00 ~ 17:00) 2020.09.04.금 사업관리 잔여업무 (산출물 템플릿 2차 배포) 인수인계 모바일 OSA 내부 업무조정 회의 (09:30~) FHIR 상세일정 회의 FHIR 테스트페이지 관련 회의 (14:00 ~ 14:10) 모바일 게이트웨이 설계자료 검토 회의 (14:10 ~ 15:00) FHIR 로컬 환경 구축 + 가이드 작성 (15:00 ~ 17:50) 잘한 점/개선사항/배운 점 궁금한 것은 적극적으로 물어보고, 되도록 그 자리에서 해결하는 것이 좋다. 알고 있는 것에 대해서는 팩트를 기반으로 명확하게 이야기한다. 명확하게 설명하지 못하면 상대방은 내 주장을 추측 또는 가설로 받아들일 수 있다. (OSA As-Is 내부 회의 중) 언행을 겸손하게 하되, 행동으로는 증명해야 한다. 그 반대가 되지 않도록 주의. 회의에서 조금 더 적극적으로 발언을 해도 되겠다. (발주처 PM께서 세번째 지적한 포인트) 나에게는 정리되지 않는 것들을 정리하는 강점이 있다. 문제가 되고 있는 것들을 정리하여 해결책을 제시하는 일을 맡았을 때 잘 할 수 있다. 생각이 정리되지 않는 어려움를 겪고 있는 사람들이 있다면 생각의 흐름을 정리할 수 있도록 내가 적극적으로 도와줄 것. 도움을 받은 일이 있다면 확실하게 감사의 인사를 하자. 상대방의 장점을 보고 그 장점을 발휘할 수 있도록 북돋워주어야 한다. 함께 지내다보면 어쩔 수 없이 단점이 보이더라도 단점을 흉보는 게 아니라 내가 상대방의 단점을 보완해줄 수 있는 방법을 찾아야 한다. 끝.","link":"/2020/09/04/word_202009_1/"},{"title":"업무일지 2020년 09월 4주차","text":"2020년 9월 4주차 개인 업무일지이다. 언제 어떤 일들을 했는지 기억하기 위하여 남긴다. Schedule2020.09.21.월 EMPI 기능분석, 사용법 검토 HAPI JPA EMPI Server 기동 테스트 (완료) 2020.09.22.화 EMPI 기능분석, 사용법 검토 FHIR 5.1.0 버전 에러 추적 FHIR 환경설치 가이드 보완 후 공유 2020.09.23.수 EMPI 기능 설명서 작성 (운영자메뉴얼에 추가) 2020.09.24.목 FHIR 진행경과 보고 및 추가 분석결과 공유회 준비 FHIR 진행경과 보고 및 추가 분석결과 공유회 진행 (13:00 ~ 14:00) FHIR 테스트계획서 초안 작성 2020.09.25.금 Resource, Profile, Extension 스터디 및 자료작성 FHIR 클라이언트 설치/사용방법 작성 (운영자메뉴얼에 추가) FHIR 운영자메뉴얼 취합 잘한 점/개선사항/배운 점 스터디와 업무는 다르다. 스터디는 계획이 있을 수 있지만 실적이 얼마나 나올지 명확하지 않다. 반면에 업무는 계획 대비 실적이 명확해야 한다. 내가 케어할 수 없는 업무영역에 대해서는 강하게 컷트해야 하는 상황도 있다. 난 지금까지 직장생활 중에 할 수 없다라는 말을 해본적이 잘 없는데, 앞으로는 점점 생길 것 같다. 일단 내가 가장 먼저 해야할 일은, 이게 끊어내야 하는 상황인지 아닌지를 판단하는 것이다. 일을 혼자 껴않고 있지 말고, 먼저 나눠줄 수 있는 것을 선별해서 떼어내는 작업을 먼저 하자. 많은 칭찬을 받는 것은 좋은 일이지만, 칭찬으로 인해 자만하거나 버릇이 없어지는 것을 우려하는 시각도 있다. 손님은 언제나 반갑게 맞이해주자. 끝.","link":"/2020/09/25/work_202009_4/"},{"title":"표준 산출물 작성 가이드","text":"현 프로젝트에서 사업관리 역할을 일부 겸하면서, 프로젝트 팀원들이 함께 사용할 수 있는 표준 산출물 템플릿과 작성가이드를 만드는 업무를 진행하였다. 산출물은 프로젝트 종료시에 발주처에 납품해야 하는 가장 핵심적인 결과물들인데, 템플릿이 어떻게 구성되느냐에 따라 향후 작성될 산출물들의 퀄리티가 좌지우지될 수 있기 때문에 보기보다 중요한 업무이다. 그래서 몇가지 기억해둘만한 요소를 기록하고자 한다. 산출물 목록 문서 명명 규칙 버전 관리 규칙 문서 스타일 ID 생성 규칙 산출물 목록발주처와 합의한 산출물 목록이다. 산출물의 범위는 프로젝트 규모에 따라, 구축하는 시스템의 특성에 따라 달라지니 참고만 한다. 착수 및 계획 단계의 산출물이다. 사업수행계획서 실행 및 통제, 종료 단계의 산출물이다. 주간보고서, 월간보고서, 완료보고서, WBS 분석 단계의 산출물이다. 요구사항정의서, 총괄테스트계획서 설계 단계의 산출물이다. 아키텍처설계서, 인터페이스설계서, 화면설계서, 프로그램목록, 데이터베이스설계서 개발 단계의 산출물이다. 소스코드, 업무프로세스절차서, 표준산출물템플릿, UI/UX 표준, 단계별 가이드 테스트 단계의 산출물이다. 단위테스트 계획서, 단위테스트 결과서, 통합테스트 계획서, 통합테스트 결과서 이행/교육 리허설결과서, 사용자메뉴얼, 운영자메뉴얼, 교육결과서 (미제출이나 내부적으로 관리할 문서) 위험이슈관리대장, 변경요청서, 변경관리대장, 결함관리대장, 회의록 등 문서ID 명명 규칙일반적으로 10억대 이상의 중형 프로젝트만 진행하더라도 산출되는 문서가 20종이 넘고, 파트별로 쪼개지는 문서까지 합하면 약 50개가 넘는 문서가 탄생할 걸로 예상이 된다. 거기에 각각의 버전이 나뉘면서 수백개의 문서가 뒤섞이게 될 것이다. 100억대 이상의 대형 프로젝트는 수천개의 문서가 탄생하니, 내가 보고 싶은 문서를 찾는 것조차도 보통 일이 아닐 것이다. 따라서 원하는 문서를 빠르게 찾기 위해서는 해당 문서의 고유한 문서명칭을 잘 짓는 것이 중요하다. 현 프로젝트에서는 아래와 같은 규칙으로 문서 명명규칙을 세웠다. [프로젝트코드]—[프로세스약어코드]—[문서종류코드&amp;일련번호]—[산출물명]—[시스템명] _ [V버전]Ex. MGS-AN-F01-요구사항정의서-메일_V1.1Ex. MGS-DE-F01-데이터베이스설계서-푸시_V2.0 프로젝트코드: 현재 프로젝트를 나타내는 약어 (Ex. MGS, 모바일 그룹웨어 시스템) 프로세스약어코드: 아래 표를 참고한다. 2자리의 영문자 코드이다. 문서종류코드: 아래 표를 참고한다. 1자리의 영문자 코드이다. 일련번호: 2자리의 숫자이다. 01부터 99까지 순서대로 부여한다. 산출물명: 산출물의 한글 명칭을 작성한다. 시스템명: 시스템이 구분되어 산출물이 쪼개지는 경우, 해당 시스템의 명칭을 작성한다. (Ex. 메일, 푸시) 버전: 아래 버전관리규칙을 참고한다. 프로세스약어코드 정의 프로세스약어코드 프로세스 설명 AN 분석(Analysis) DE 설계(Design) DV 개발(Develop) TS 테스트(Test) DP 이행 PM 프로젝트관리 SC 범위관리 SH 일정관리(=진척관리) CO 원가관리 CM 형상관리 QM 품질관리 RM 자원관리 CC 의사소통관리 RK 위험 및 이슈관리 SE 보안관리 ET 교육훈련 TT 기술이전 IM 검수관리 문서종류코드 정의 문서종류코드 설명 R 보고서(Report) F 산출물(Formal) P 절차(Process) G 가이드(Guide) E 기타(etc) 버전 관리 규칙문서는 소스코드처럼 형상관리시스템을 잘 사용하지 않으므로, 자체적으로 버전관리 규칙을 철저히 지켜주는 것이 좋다. 버전관리 규칙을 지키지 않으면, 나중에 어떤 버전이 최신인지 여러 담당자들끼리 작업이 꼬이는 문제가 반드시 발생할 것이다. 현 프로젝트에서는 아래와 같은 규칙으로 버전을 관리하기로 했다. 베이스라인 이전 담당자가 초안 작성 시, V0.1을 부여한다. 형상이 변경할 때마다, 버전을 0.1씩 증가시킨다. 베이스라인 수립 베이스라인은 V1.0으로 정의한다. 베이스라인이란, 발주처와 수행사가 합의 완료한 산출물의 최초 버전이라는 의미이다. 베이스라인 이후 형상 항목의 내용 변경 시, V1.1부터 0.1씩 증가시킨다. (리비전에 대해서는 관련자에게만 공지한다.) 형상관리 대상 및 메이저 항목의 변경 시,맨 앞자리 버전을 증가시킨다 (Ex. 1.0 -&gt; 2.0) 문서 스타일가장 기본적이면서 필수적으로 지켜야할 문서의 스타일은 다음과 같다. 문서 종류: MS Office (Word/PPT/Excel) 사업명: RFP에 공고된 사업명 기준으로 분명하게 적을 것 문서크기: A4 로고: 좌측하단에는 발주처 로고, 우측하단에는 수행사 로고 글꼴: 맑은 고딕 첫 페이지에 결재라인 명시 (Ex. PL -&gt; PM -&gt; 사업단장) 넘버링 체계 1 1.1 1.1.1 1.1.1.1 Task ID 생성 규칙일을 하다보면, 분명 추적관리가 필요한 Task들이 있을 것이다. 예를 들어 A라는 특정한 결함을 찾아가고 싶은데 수천개의 결함들 중에서 내가 원하는 결함을 어떻게 찾아갈 수 있을까? 그럴 때 해당 결함에 ID가 부여되어 있으면 추적이 용이할 것이다. 현 프로젝트에서는 추적을 위해 각각의 Task ID를 다음과 같이 생성하기로 규칙을 세웠다. [프로젝트 코드]—[서브시스템코드]—[업무코드&amp;일련번호]Ex. MGS-PUSH-RQ0001Ex. MGS-COMM-ID0033예시설명. 모바일그룹웨어 구축 프로젝트의 푸시파트 요구사항 1번예시설명. 모바일그룹웨어 구축 프로젝트의 공통파트 통합테스트 결함 33번 프로젝트코드: 현재 프로젝트를 나타내는 약어 (Ex. MGS, 모바일 그룹웨어 시스템) 서브시스템코드: 프로젝트팀 내에 구성된 각 파트별 약어, 3~4자리 코드이다. 아래 예시를 참고한다. Task 코드: 아래 표를 참고한다. 2자리의 영문자 코드이다. 일련번호: 4자리의 숫자이다. 0001부터 9999까지 순서대로 부여한다. 서브시스템코드(예시)예시이므로 참고만 하고, 수행하는 프로젝트에 맞게 서브시스템코드는 재정의한다. 서브시스템코드 설명 MAIL 메일 파트 PUSH 푸시 파트 INFRF 인프라 파트 COMM 공통 파트 Task 코드추적이 필요한 대부분의 Task를 아래와 같이 정의하였으나, 혹시 추가로 필요한 경우에는 추가하여 사용한다. Task 코드 의미 RQ 요구사항(Requirement) SC 화면(Screen) PG 프로그램(Program) IF 인터페이스(Interface) UC 단위테스트 케이스(Unit Test Case) UD 단위테스트 결함(Unit Test Defect) IS 통합테스트 시나리오(Integrated Test Scenario) IC 통합테스트 케이스(Integrated Test Case) ID 통합테스트 결함(Integrated Test Defect) RS 리허설 시나리오(Rehearsal Scenario) RC 리허설 케이스(Rehearsal Case) RD 리허설 결함(Rehearsal Defect) TR 교육(Training) IU 이슈(Issue) RK 위험(Risk) CH 변경요청(Change) 끝.","link":"/2020/08/08/standard-formal-guide/"},{"title":"업무일지 2020년 09월 5주차 (10월 1주차)","text":"2020년 9월 5주차 (10월 1주차) 개인 업무일지이다. 언제 어떤 일들을 했는지 기억하기 위하여 남긴다. Schedule금주는 추석연휴(09.30~10.02)로 인해 Working Day가 2일이다. 2020.09.28.월 각종 본사 행정 업무 (경비처리, 동료평가 등) HAPI FHIR 테스트페이지 사용법 가이드 작성 Resource 설명서 작성 (Resource, Extension, Profile) 2020.09.29.화 FHIR To-Do 점검 및 진행방안 재확정 회의 (09:00 ~ 10:00) Resource 설명서 작성 (Operation) - 완료 FHIR Client CRUD 예제 작성 - 완료 잘한 점/개선사항/배운 점 소프트웨어 버전은 처음부터 신중하게 선택해야 한다. 고객사의 정책이 어떤지, 함께 납품하는 시스템들은 어떤 버전을 사용하는지 등등. 끝.","link":"/2020/09/29/work_202009_5/"},{"title":"HAPI FHIR 환경 구성하기 (1&#x2F;7편) - JDK 설치","text":"오픈소스 HAPI FHIR 환경은 다음과 같이 7단계로 구성된다.본 글에서는 1. HAPI FHIR 환경 구성하기 (1/7편) - JDK 설치에 대해 다룬다. HAPI FHIR 환경 구성하기 (1/7편) - JDK 설치 HAPI FHIR 환경 구성하기 (2/7편) - Eclipse 설치 HAPI FHIR 환경 구성하기 (3/7편) - Tomcat 설치 HAPI FHIR 환경 구성하기 (4/7편) - MySQL 설치 및 스키마/계정 설정 HAPI FHIR 환경 구성하기 (5/7편) - hapi-fhir-jpa-server 환경세팅 HAPI FHIR 환경 구성하기 (6/7편) - hapi-fhir 테스트 페이지 활용 HAPI FHIR 환경 구성하기 (7/7편) - hapi-fhir-client 환경세팅 JDK(Java Development Kit)은 자바 어플리케이션을 구축하기 위한 플랫폼 구성요소다. JDK는 대표적으로 OracleJDK와 OpenJDK가 있는데, 이 중에서 오픈소스인 OpenJDK를 설치하도록 한다. (OracleJDK의 경우 현재 라이센스 이슈가 있다.) OpenJDK 버전 중에서는 고객사에서 사용중인 OpenJDK 1.8.0를 설치한다. 필자는 Windows 환경에서 설치 중이므로, Windows를 기준으로 설명하겠다. OpenJDK 1.8.0 - Gihub 페이지에 접속하여 .zip 파일을 클릭하여 내려받는다. 최신 버전을 설치하였으며, 2020년 10월 기준으로 최신버전은 1.8.0.265이다. 내려받은 파일을 압축을 푼다. D:드라이브 아래 hapi-fhir라는 폴더를 생성한 후에 압축을 푼 jdk 폴더를 D:/hapi-fhir 경로로 위치시킨다.Hapi-fhir 폴더는 앞으로 각종 소프트웨어와 소스가 위치하게될 프로젝트 폴더이니 기억해두도록 한다. 다운받은 jdk를 시스템 환경변수에 등록해주어야 한다. [제어판] &gt; [시스템] &gt; [고급 시스템 설정] &gt; [고급 탭] &gt; [환경변수] 순으로 타고 들어간다. 먼저, [제어판]에서 [시스템]을 선택한다. [시스템] 좌측 메뉴에서 [고급 시스템 설정]을 선택한다. [시스템 속성]의 [고급] 탭에서 [환경 변수]를 선택한다. [시스템 변수]를 새로 만든다. 새 시스템 변수로 “JAVA_HOME”을 등록해준다. 변수값으로는 앞서 내려받은 jdk 폴더 경로(D:₩hapi-fhir₩openjdk-1.8.0.265)를 지정해준다. (단, 본인이 다운받은 jdk 버전에 따라 폴더명이 다르게 생성되었을 수 있으니 잘 확인하여 진행한다.) 작성한 후에는 [확인] 버튼을 선택하여 빠져나간다. 다음으로는 Path에 JAVA_HOME을 등록해주어야 한다. 시스템 변수 중에 “Path”를 찾아 [편집]한다.Path에 한줄을 추가하여 %JAVA_HOME%₩bin 을 등록한다. 환경변수 편집이 끝났으므로, [확인] 버튼을 선택하여 빠져나간다. jdk가 환경변수로 잘 등록되었는지 확인해볼 차례다. Command를 실행하여 java -version 을 실행해본다. 본인이 설치한 jdk의 버전이 아래에 잘 출력되는지 확인한다. OpenJDK 설치는 이것으로 마무리한다. 끝.","link":"/2020/09/08/hapi-fhir-manual-1/"},{"title":"HAPI FHIR 환경 구성하기 (2&#x2F;7편) - Eclipse 설치","text":"오픈소스 HAPI FHIR 환경은 다음과 같이 7단계로 구성된다.본 글에서는 2. HAPI FHIR 환경 구성하기 (2/7편) - Eclipse 설치에 대해 다룬다. HAPI FHIR 환경 구성하기 (1/7편) - JDK 설치 HAPI FHIR 환경 구성하기 (2/7편) - Eclipse 설치 HAPI FHIR 환경 구성하기 (3/7편) - Tomcat 설치 HAPI FHIR 환경 구성하기 (4/7편) - MySQL 설치 및 스키마/계정 설정 HAPI FHIR 환경 구성하기 (5/7편) - hapi-fhir-jpa-server 환경세팅 HAPI FHIR 환경 구성하기 (6/7편) - hapi-fhir 테스트 페이지 활용 HAPI FHIR 환경 구성하기 (7/7편) - hapi-fhir-client 환경세팅 Eclipse란, Java를 기반으로 한 오픈소스 IDE(통합개발환경)이다. 이클립스 다운로드 페이지로 접속하여, Download 64 bit 파일을 다운로드한다. 다운로드 버튼을 클릭하여 Eclipse Installer를 내려받는다. 다운로드받은 Eclipse Installer를 실행한다. Installer를 통해 Eclipse의 사용자에게 필요한 패키지를 선택하여 설치할 수 있다. Eclipse IDE for Enterprise Java Developers를 선택하여 진행한다. JVM 경로와 설치경로(Installation Folder)를 지정한다. JVM은 앞서 설치한 jdk 폴더 경로를 지정하고, 설치경로는 프로젝트 폴더(D:\\hapi-fhir)로 지정한다. 소프트웨어 사용과 관련된 동의서이다. Accept Now를 누르고 진행한다. 설치가 진행된다. 중간중간 팝업창이 뜨면 계속 진행하면 된다. 설치가 완료되었다. 지정한 설치경로 (D:/hapi-fhir) 아래에 다음과 같이 eclipse 폴더가 생성이 된다. Eclipse 설치는 이것으로 마무리한다. 끝.","link":"/2020/09/09/hapi-fhir-manual-2/"},{"title":"HAPI FHIR 환경 구성하기 (3&#x2F;7편) - Tomcat 설치","text":"오픈소스 HAPI FHIR 환경은 다음과 같이 7단계로 구성된다.본 글에서는 3. HAPI FHIR 환경 구성하기 (3/7편) - Tomcat 설치에 대해 다룬다. HAPI FHIR 환경 구성하기 (1/7편) - JDK 설치 HAPI FHIR 환경 구성하기 (2/7편) - Eclipse 설치 HAPI FHIR 환경 구성하기 (3/7편) - Tomcat 설치 HAPI FHIR 환경 구성하기 (4/7편) - MySQL 설치 및 스키마/계정 설정 HAPI FHIR 환경 구성하기 (5/7편) - hapi-fhir-jpa-server 환경세팅 HAPI FHIR 환경 구성하기 (6/7편) - hapi-fhir 테스트 페이지 활용 HAPI FHIR 환경 구성하기 (7/7편) - hapi-fhir-client 환경세팅 Tomcat은 전세계적으로 가장 많이 사용되는 오픈소스 웹 컨테이너다. 아파치 소프트웨어 재단에서 개발한 서블릿 컨테이너(또는 웹 컨테이너)만 있는 웹 애플리케이션 서버이다. Tomcat은 웹서버와 연동하여 실행할 수 있는 자바 환경을 제공하여 JSP와 자바 서블릿이 실행될 수 있는 환경을 제공하고 있다. Tomcat 9 설치하기 Apache Tomcat 사이트에 접속하여 Tomcat 9 다운로드 페이지로 이동한다. Tomcat 9은 2020년 10월 기준, 최신버전 9.0.38 까지 릴리즈되었다. “32-bit/64-bit Windows Service Installer”를 선택하여 제품을 내려받는다. 내려받은 Setup파일을 실행하여 설치를 진행한다. 소프트웨어 사용 라이센스에 동의하고 넘어간다. 컴포넌트를 선택하고 Next 진행한다. Tomcat은 디폴트 8080포트로 설정되나, 다른 포트로 접속하고자 한다면 포트번호를 변경한다. 그리고 User Name과 Password를 설정하고 Next로 넘어간다. JVM경로를 지정해준다. 앞서 jdk를 설치한 폴더 경로를 지정한다. 다음으로 진행하기 전에, 프로젝트 폴더(D:/hapi-fhir)내에 Tomcat을 설치할 폴더를 생성하도록 한다. 다음과 같이 Tomcat 9라는 폴더를 생성한다. 방금 전에 생성한 Tomcat 9 폴더를 설치 경로로 잡아준 후에 Install을 진행한다. 설치가 완료되었다면, Finish를 눌러 종료한다. (Tomcat 서버를 테스트해보려면, Run Apache Tomcat을 체크한다.) Tomcat이 정상적으로 실행되는지 확인해보기 위해 웹 브라우저를 열어서 “localhost:8080”을 입력한다. 다음과 같은 화면이 뜬다면 정상적으로 설치 및 실행된 것이다. Tomcat 설치는 이것으로 마무리한다. 끝.","link":"/2020/09/10/hapi-fhir-manual-3/"},{"title":"HAPI FHIR 환경 구성하기 (4&#x2F;7편) - MySQL 설치 및 스키마&#x2F;계정 설정","text":"오픈소스 HAPI FHIR 환경은 다음과 같이 7단계로 구성된다.본 글에서는 4. HAPI FHIR 환경 구성하기 (4/7편) - MySQL 설치 및 스키마/계정 설정에 대해 다룬다. HAPI FHIR 환경 구성하기 (1/7편) - JDK 설치 HAPI FHIR 환경 구성하기 (2/7편) - Eclipse 설치 HAPI FHIR 환경 구성하기 (3/7편) - Tomcat 설치 HAPI FHIR 환경 구성하기 (4/7편) - MySQL 설치 및 스키마/계정 설정 HAPI FHIR 환경 구성하기 (5/7편) - hapi-fhir-jpa-server 환경세팅 HAPI FHIR 환경 구성하기 (6/7편) - hapi-fhir 테스트 페이지 활용 HAPI FHIR 환경 구성하기 (7/7편) - hapi-fhir-client 환경세팅 MySQL은 전세계적으로 가장 널리 사용되는 오픈소스 관계형 데이터베이스 관리 시스템(RDBMS)이다. FHIR 데이터를 저장할 데이터베이스로 활용한다. MySQL 설치하기 MySQL Downloads 사이트에 접속한다. MySQL 제품 중, 무료 버전인 MySQL Community Edition(GPL)을 다운로드 받는다. MySQL Installer for Windows를 선택하여 다운로드받는다. Installer를 활용하면 MySQL 제품들을 한번에 간편히 설치할 수 있다. MySQL Installer 다운로드 페이지에 들어가면 2가지 제품이 나타나는데, 그 중에서 파일 사이즈가 큰 것을 선택하여 다운로드를 진행한다. 2020년 10월 기준으로 MySQL 최신버전은 8.0.21이며, 해당 버전으로 설치를 진행하였다. Login을 유도하는 창이 나오지만, 자세히보면 아래 쪽에 Login을 하지 않고 바로 다운로드를 진행하는 버튼이 있다. No thanks, just start my download를 선택한다. MySQL Installer를 내려받았으면, 실행하여 설치를 진행한다. Setup Type은 Developer Default를 선택한다. Check Requirement는 별도 체크없이 전체 제품을 모두 설치한다. Installer가 차근차근 Check Requirements를 진행하는데, 중간중간에 소프트웨어 사용권 계약과 관련한 팝업창들이 뜬다. 동의하고 계속 진행한다. Next를 눌러 계속 진행한다. 만약에 다음과 같은 팝업창이 뜨면 Yes를 선택하고 계속 진행한다. Execute를 선택하여 설치를 진행한다. 설치가 잘 진행되었다면, Next를 눌러준다. 계속 진행한다. MySQL Server의 사양을 선택한다. Standalone MySQL Server와 InnoDB Cluster 타입이 있는데, 이 중에서 InnoDB Cluster를 선택하고, Create a New InnoDB Cluster를 선택하여 설치를 진행한다. InnoDB Cluster의 Name, User 등을 설정한다. User-Name, Password는 원하는대로 설정하되, 잊어버리지 않게 잘 기억해두도록 한다. 또한 Host Address도 현재 Local PC를 잡아준다. Configuration Type과 Network를 아래와 같이 설정하고 진행한다. 만약 3306 포트를 사용할 수 없다면 다른 포트로 변경한다. Authentication Method는 MySQL에서 추천하는 것을 선택하고 넘어간다. MySQL Root 계정의 Password를 설정한다. Password를 잊어버리면 곤란해질 수 있으니 잘 기억해두도록 한다. 그리고 Add User를 선택하여 FHIR DB 사용자 계정을 추가한다. FHIR DB 사용자명은 fhirman으로 설정하였다. (원하는 명칭으로 설정해도 무방하다.) Role은 DB Admin 권한을 부여하였다. 역시 비밀번호를 설정하고 잊어버리지 않게 잘 기억해두도록 한다. 다 입력하였다면 Ok를 선택하여 빠져나간다. fhirman이라는 사용자가 추가된 것을 확인할 수 있다. Next를 눌러 계속 진행한다. Server의 명칭을 설정하고 Next로 넘어간다. Default로 MySQL80으로 설정되어 있어서 별도 수정하지 않고 계속 진행하였으나, 명칭은 운영자가 원하는 대로 설정하여도 무방할 듯 하다. 설정을 적용한다. Execute를 선택한다. MySQL Workbench 활용하여 스키마, 계정 설정하기위에서 설명한 절차대로 진행하였다면, MySQL Workbench가 함께 설치되었을 것이다. (만약 설치가 안되었다면, MySQL 홈페이지에서 별도로 설치가 가능하다) MySQL Workbench는 SQL 개발과 관리, 데이터베이스 설계, 생성 그리고 유지를 위한 단일 개발 통합 환경을 제공하는 비주얼 데이터베이스 설계 도구이다. MySQL Workbench에 대한 사용법은 생활코딩 사이트에서 무료로 제공하고 있으니 필요한 경우 참고하면 유용할 듯하다. MySQL Workbench를 실행하면 다음과 같은 화면이 뜬다. 최초로 MySQL Connection을 만들기 위해 + 버튼을 선택한다. Connection의 이름은 임의로 설정하여도 무방하나, Local PC에 설치하는 것이기 때문에 mysql_local로 명명하였다. 포트는 일반적으로 3306가 디폴트로 설정될 것이나, 앞에서 MySQL Server를 설치할 때 포트번호를 변경하였다면 해당 포트번호를 입력한다. User는 관리자 계정인 root로 접속해본다. Password를 입력하고 Test Connection을 클릭하면 연결이 잘 되었는지 실행결과를 볼 수 있다. 연결이 성공적으로 잘 되었다. Ok를 눌러서 Connection을 생성한다. 메인 화면에 Connection이 생성된 것을 볼 수 있다. 선택하여 MySQL Server에 접속한다. MySQL Server에 접속하여, Schema를 둘러본다. 기본적으로 sys와 mysql_innodb_cluster_metadata 스키마가 생성되어있다. Schemas 창 우클릭 &gt; Create Schema를 선택하여 fhir용으로 사용할 스키마를 생성한다. 스키마 명칭은 hapi-r4, Charset을 utf8로 설정하고, Apply를 눌러 진행한다. 자동으로 스키마 생성 SQL 스크립트가 생성된다. 이상이 없다면 Apply를 눌러 계속 진행한다. SQL 실행이 끝났으면 Finish한다. 앞서 MySQL Server 설치 중에 생성하였던 fhirman 계정의 상세 권한을 설정한다. 좌측 Navigator 하단의 [Administration] 탭의 [Users and Privileges]을 선택하면 각 계정의 권한을 관리하는 화면이 열린다. 여러 계정 리스트 중 fhirman을 선택한다. Fhirman 계정의 상세한 권한을 확인할 수 있다. 그 중에서 세번째 탭인 [Administrative Roles]를 눌러 권한이 잘 주어졌는지 확인한다. 현재는 특별히 제한할 권한이 없으므로, 전체 권한을 모두 부여하였다. 네번째 탭 [Schema Privileges]을 눌러 어떤 스키마에 권한을 부여할 것인지도 지정한다. Add Entry를 눌러서 신규로 생성하였던 hapi_r4 스키마 권한을 부여한다. hapi_r4 스키마에 대한 권한을 전체 선택(Select ALL)하고 Apply한다. MySQL 설치와 MySQL Workbench를 활용한 각종 환경세팅은 이것으로 마무리한다. 끝.","link":"/2020/09/11/hapi-fhir-manual-4/"},{"title":"HAPI FHIR 환경 구성하기 (5&#x2F;7편) - hapi-fhir-jpa-server 환경세팅","text":"오픈소스 HAPI FHIR 환경은 다음과 같이 7단계로 구성된다.본 글에서는 5. HAPI FHIR 환경 구성하기 (5/7편) - hapi-fhir-jpa-server 환경세팅에 대해 다룬다. HAPI FHIR 환경 구성하기 (1/7편) - JDK 설치 HAPI FHIR 환경 구성하기 (2/7편) - Eclipse 설치 HAPI FHIR 환경 구성하기 (3/7편) - Tomcat 설치 HAPI FHIR 환경 구성하기 (4/7편) - MySQL 설치 및 스키마/계정 설정 HAPI FHIR 환경 구성하기 (5/7편) - hapi-fhir-jpa-server 환경세팅 HAPI FHIR 환경 구성하기 (6/7편) - hapi-fhir 테스트 페이지 활용 HAPI FHIR 환경 구성하기 (7/7편) - hapi-fhir-client 환경세팅 HAPI란, HL7 Application Programming Interface의 약자로 HL7 FHIR 사양으로 구현한 오픈소스 Java 라이브러리이다. HAPI-FHIR 서버 소스 내려받기 HAPI-FHIR 홈페이지에 접속하여, Documentation 메뉴로 접속한다. 좌측 메뉴에서 [JPA SERVER] &gt; [Get Started] 를 선택하여, 게시되어 있는 Github 소스코드 경로로 접속한다. Github에 접속되었으면, 5.1.0 버전을 선택한다. 소스코드 ZIP 파일을 내려받는다. 앞으로 FHIR와 관련된 소스코드를 보관할 경로를 만들어보자. 프로젝트 폴더(D:/hapi-fhir) 아래에 workspaces라는 폴더를 생성한다. workspaces 폴더(D:/hapi-fhir/workspaces) 아래에 다시 workspace_jpaserver 라는 폴더를 생성한다. 이 폴더는 HAPI FHIR JPA SERVER 소스코드를 보관할 경로이다. workspace_ jpaserver 폴더(D:/hapi-fhir/workspaces/workspace_jpaserver) 아래에 Github에서 내려받은 ZIP파일 압축을 풀어준다. Eclipse에 프로젝트 임포트하기 앞서 설치하였던 Eclipse를 실행한다. \u0010Eclipse를 실행하면, 가장 먼저 Workspace 경로를 지정하는 화면이 뜰 것이다. 그럼 앞서 HAPI FHIR JPA SERVER 소스코드를 저장한 경로 (D:/hapi-fhir/workspaces/workspace_jpaserver)를 지정하고 Launch한다. Eclipse가 실행되었지만, 아직 어떠한 프로젝트도 떠 있지 않은 빈 화면 상태이다. 앞서 내려받았던 HAPI JPA SERVER 프로젝트를 임포트하기 위해, 좌측 Project Explorer에서 Import projects를 한다. HAPI FHIR JPA SERVER는 빌드 도구로 maven을 사용하기 때문에, Existing Maven Projects를 선택하여 진행한다. Root Directory에 HAPI FHIR JPA SERVER 소스코드 경로를 지정해준다. (D:/hapi-fhir/workspaces/workspace_jpaserver/hapi-fhir-jpaserver-starter-master) 그리고, 각종 maven 라이브러리가 정의되어 있는 pom.xml 파일을 선택한 후에 Finish한다. 아래와 같이 HAPI FHIR JPA SERVER 프로젝트가 임포트된 것을 확인할 수 있다. 각종 설정값 변경하기hapi.properties 수정src/main/resources/hapi.properties 파일을 열어 아래와 같이 설정값을 수정한다. 필수 수정사항은 4가지이다. fhir_version을 R4로 설정한다. 1fhir_version = R4 datasource 설정을 h2에서 mysql 내용으로 변경한다. 1234567#datasource 설정을 h2(초기값)에서 MySQL로 변경한다.#datasource.driver=org.h2.Driverdatasource.driver=com.mysql.cj.jdbc.Driver#datasource.url=jdbc:h2:file:./target/database/h2datasource.url=jdbc:mysql://localhost:3306/hapi_r4?characterEncoding=UTF-8&amp;serverTimezone=UTCdatasource.username=fhirmandatasource.password=12345678 &lt;------비밀번호를 입력하기 hibernate 설정을 변경하고, D:₩hapi-fhir₩hibernate₩lucence₩indexes 폴더를 생성한다. (폴더를 생성하지 않으면 에러가 발생할 것이다) 12345678#hibernate.dialect=org.hibernate.dialect.H2Dialecthibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialecthibernate.search.default.indexBase=D:/hapi-fhir/hibernate/lucence/indexeshibernate.search.lucene_version=LUCENE_CURRENT#jpa-server 기동시 MySQL 스키마를 자동 업데이트하기 위해 아래 설정을 update로 변경한다.hibernate.hbm2ddl.auto=update EMPI 모드로 기동하기 위해 아래와 같이 변경한다. EMPI란 Enterprise Master Patient Index의 약자로, 외부에서 들어오는 환자(또는 의료진)을 감시하여 내부에 존재하는 환자(또는 의료진)과 동일인으로 판단되면 Resource간에 링크를 만드는 기능이다. 12345# Enable Websocket Subscription Channelsubscription.websocket.enabled=true# EMPIempi.enabled=true (선택사항) SQL을 Console 로그에 찍어보고 싶다면, 아래 설정을 true로 변경한다. 초기값은 false일 것이다. 12hibernate.format.sql=truehibernate.show_sql=true pom.xml 수정hapi-fhir-jpaserver-starter-master 프로젝트 가장 상위 경로에 pom.xml이라는 파일이 있을 것이다. 파일을 열어서 아래 내용을 수정한다. H2 데이터베이스 내용이 있다면, 필요없으므로 주석처리한다. 현 프로젝트에서는 MySQL을 사용하므로, MySQL 설정이 필요하다. MySQL 관련된 설정이 있는지 확인하여 만약 없으면 추가한다. 123456789101112131415&lt;!-- H2 데이터베이스 내용을 찾아 아래와 같이 주석처리한다. --&gt;&lt;!-- &lt;dependency&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;/dependency&gt;--&gt;&lt;!-- dependencies 아래에 MySQL 설정이 있는지 확인하고, 없다면 추가한다. --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.16&lt;/version&gt; &lt;/dependency&gt; empi-rules.json 수정src₩main₩resources₩empi-rules.json 파일을 열어, 버전(“version”: “1”)이 명시되어 있는지 확인하고, 없다면 아래와 같이 추가하도록 한다. (버전이 없으면 에러가 발생한다.) 1234567{ &quot;version&quot;: &quot;1&quot;, &quot;CandidateSearchParams&quot; : [ {..} @Test 찾아서 모두 주석처리src/test/java/ca/uhn/fhir/jpa/starter 폴더 아래 java 클래스에 선언되어 있는 @Test 를 전부 주석처리한다. @Test 코드를 주석처리하는 이유는, 해당 코드들로 인해서 maven-install 시에 오류가 발생하기 때문이다. @Test 코드를 주석처리한 후에는 maven-install 이 정상적으로 실행되었다. (Ctrl+H를 눌러, File Search를 활용하여 @Test 코드를 전부 서치하는 것을 추천한다. 전부 주석처리한다.) 12//아래와 같이 주석처리한다.//@Test HAPI-FHIR 버전에 따라 다를 수 있지만, 가이드 작성자는 아래의 java 파일들에 @Test 코드들이 선언되어 있었으니, 참고한다. ExampleServerDstu2IT.java ExampleServerDstu3IT.java ExampleServerR4IT.java ExampleServerR5IT.java MultitenantServerR4IT.java Maven Update 및 Maven Install 실행 Maven Update를 진행한다. Maven update란, pom.xml에 정의된 각종 maven 라이브러리를 중앙 레포지토리에서 가져오는 (업데이트하는) 기능이다. 실행방법은 [프로젝트 우클릭] &gt; [Maven] &gt; [Update Project..]이다. Force Update of Snapshots/Releases를 선택하여 업데이트를 진행한다. 최초로 Maven Update를 실행하는 경우에는 네트워크 환경에 따라 약 10분 이상 소요될 수 있다. Maven Install을 실행한다. 실행방법은 [프로젝트 우클릭] &gt; [Run As] &gt; [Maven install]이다. Maven Install이 정상적으로 완료되면, 아래와 같이 Console 창에 Build Success가 출력될 것이다. Maven Install이 완료되면, target 폴더 아래에 관련된 소스들이 생성된다. Eclipse 내에 Tomcat Server 세팅 및 실행하기 Eclipse 상단 메뉴에서 [Window] &gt; [Preferences] 를 연다. [Server] &gt; [Runtime Environment]로 들어가서 Server를 Add한다. 앞서 Tomcat 9.0.38 버전을 설치했으니, 싱크를 맞춰 Apache Tomcat v9.0 버전을 선택하고 넘어간다. 앞서 Tomcat을 설치했던 경로와, jdk를 설치했던 경로를 지정하고 Finish한다. Apache Tomcat v9.0가 생성되었다. Apply and Close를 눌러 저장하고 빠져나간다. 앞서 등록한 Tomcat Server를 HAPI FHIR JPA SERVER 프로젝트의 로컬서버로 등록해본다. [Server] 창 아래 No servers are available. Click this link to create a new server 링크를 클릭한다. 아래와 같이 선택되어 있는지 확인한 후에 Next하여 넘어간다. Tomcat 서버가 참조할 모듈(war파일) hapi-fhir-jpaserver-starter-master를 Add한 후에 Finish하여 빠져나간다. Tomcat 로컬서버가 등록되었다. 더블 클릭하여 몇가지 설정을 변경한다. Tomcat v9.0 Server at localhost를 더블클릭하면 설정을 변경할 수 있는 창이 뜬다. 여기서 아래와 같이 3가지를 변경하고 저장한다. Server Options: (1) Push module contexts to separate XML files 와 (2) Modules auto reload by default 두 가지를 체크한다. Timeouts를 늘려준다. (Start 450, Stop 150) Tomcat admin port를 8005로 변경한다. 서버 실행 및 테스트 설정이 끝이 났으므로, 서버를 기동해본다. 서버를 우클릭하여 Start를 누른다. 서버가 에러 없이 잘 기동되는지 Console 창을 살펴본다. 별다른 에러 없이 다음과 같이 Console에 출력되면 서버가 잘 기동된 것이다. 서버가 기동되었으므로, 테스트화면에 접속하여 이상없이 동작하는지를 점검해본다. 브라우저를 열어 테스트화면의 주소를 입력한다. (localhost:8080/hapi-fhir-jpaserver/) 테스트화면의 주소는 hapi.properties 파일 내에도 선언되어 있으니 열어서 확인해보아도 된다. 샘플 테스트를 위해 Patient라는 Resource를 Create 해본다. 실행 방법은 좌측메뉴 [Patient] &gt; [CRUD Operation] &gt; ID 및 Contents 작성 &gt; [Create] 실행 순이다. 샘플로 입력할 Contents 내용은 아래 json 코드를 참고한다. 환자의 이름만 있는 가장 간단한 형태의 Patient Resource이다. 123456{ &quot;resourceType&quot;: &quot;Patient&quot;, &quot;name&quot;: [ { &quot;text&quot;: &quot;Peter James&quot; } ]} 아래와 같이 정상적으로 실행되면, HAPI FHIR JPA SERVER 개발환경이 잘 세팅된 것이다. HAPI FHIR JPA SERVER 환경세팅은 이것으로 마무리한다. 끝.","link":"/2020/09/12/hapi-fhir-manual-5/"},{"title":"HAPI FHIR 환경 구성하기 (6&#x2F;7편) - hapi-fhir 테스트 페이지 활용","text":"오픈소스 HAPI FHIR 환경은 다음과 같이 7단계로 구성된다.본 글에서는 6. HAPI FHIR 환경 구성하기 (6/7편) - hapi-fhir 테스트 페이지 활용에 대해 다룬다. HAPI FHIR 환경 구성하기 (1/7편) - JDK 설치 HAPI FHIR 환경 구성하기 (2/7편) - Eclipse 설치 HAPI FHIR 환경 구성하기 (3/7편) - Tomcat 설치 HAPI FHIR 환경 구성하기 (4/7편) - MySQL 설치 및 스키마/계정 설정 HAPI FHIR 환경 구성하기 (5/7편) - hapi-fhir-jpa-server 환경세팅 HAPI FHIR 환경 구성하기 (6/7편) - hapi-fhir 테스트 페이지 활용 HAPI FHIR 환경 구성하기 (7/7편) - hapi-fhir-client 환경세팅 HAPI FHIR JPA SERVER를 정상적으로 기동하면, HAPI FHIR 테스트 페이지에 접속할 수 있다. 브라우저를 실행하여 다음 링크에 접속한다. (http://localhost:8080/hapi-fhir-jpaserver/) 최초 실행 페이지는 다음과 같다. 좌측 메뉴 구성은 다음과 같다.(1) Option은 서버 옵션을 설정하는 버튼들이 모여있다.(2) Server는 Home으로 이동하는 버튼이다.(3) Resources는 특정한 Resources를 CRUD하는 페이지로 이동하는 링크이다. 특정 Resource를 선택하면, 다음과 같은 화면이 나타난다. Patient Resource를 예시로 선택하였다. 먼저, Search 탭을 살펴보자. 각종 Parameter, Sorting 방식을 설정하고 조회를 실행할 수 있다.(1) 조회를 실행하는 버튼이다.(2) 조회에 사용할 Parameter를 설정할 수 있다. Resource의 각종 Element들을 Parameter로 선택할 수 있도록 콤보박스가 나타난다. 미선택시 전부 조회된다.(3) 조회 정보에 추가로 포함할 것들을 선택할 수 있다.(4) 정렬 방식을 선택할 수 있다.(5) 그외 Limit(검색 최대 개수) 등을 선택할 수 있다. 다음으로 CRUD 탭을 살펴보자.(1) Read 실행버튼이다. 우측에 ID를 필수로 입력해야 한다.(2) History 조회버튼이다. Resource CRUD가 발생한 이력을 조회할 수 있다.(3) Delete 실행버튼이다. 우측에 ID를 필수로 입력해야 한다.(4) Create 실행버튼이다. 우측에 Contents(JSON전문)을 필수로 입력해야 한다. ID는 선택사항이다.(5) Update 실행버튼이다. 우측에 ID와 Contents를 필수 입력해야 한다.(6) Validate는 Contents가 올바른 포멧인지 점검할 수 있는 기능이다. 이것으로 테스트 페이지 활용에 대해 마친다. 끝.","link":"/2020/09/13/hapi-fhir-manual-6/"},{"title":"HAPI FHIR 환경 구성하기 (7&#x2F;7편) - hapi-fhir-client 환경세팅","text":"오픈소스 HAPI FHIR 환경은 다음과 같이 7단계로 구성된다.본 글에서는 7. HAPI FHIR 환경 구성하기 (7/7편) - hapi-fhir-client 환경세팅에 대해 다룬다. HAPI FHIR 환경 구성하기 (1/7편) - JDK 설치 HAPI FHIR 환경 구성하기 (2/7편) - Eclipse 설치 HAPI FHIR 환경 구성하기 (3/7편) - Tomcat 설치 HAPI FHIR 환경 구성하기 (4/7편) - MySQL 설치 및 스키마/계정 설정 HAPI FHIR 환경 구성하기 (5/7편) - hapi-fhir-jpa-server 환경세팅 HAPI FHIR 환경 구성하기 (6/7편) - hapi-fhir 테스트 페이지 활용 HAPI FHIR 환경 구성하기 (7/7편) - hapi-fhir-client 환경세팅 HAPI FHIR Client는 HAPI FHIR JPA SERVER에 연결할 수 있는 클라이언트이다. 설치 방법 HAPI FHIR Document에서 [CLIENT] &gt; [Get Started] 페이지에 접속한 뒤, hapi-fhirstarters-client-skeleton 링크를 클릭하여 Github 페이지로 이동한다. Github에 접속하여 fhirstarters라는 상위 레포지토리로 이동한다. Fhirstarters ZIP 파일을 다운로드한다. Client 소스코드를 저장할 Workspace를 생성한다. D:₩hapi-fhir₩workspaces 경로에 workspace_client라는 폴더를 생성한다. workspace_client 폴더에, 앞서 Github에서 내려받은 ZIP파일을 압축 해제한다. Eclipse를 실행한다. workspace_client를 디렉토리로 설정한 후 Eclipse를 기동한다. 아래와 같이 빈 화면이 실행될 것이다. 먼저 Project를 추가한다. 좌측 [Project Explorer] &gt; [Import project] 를 선택한다. [Maven] &gt; [Existing Maven Projects]를 선택한다. Root Directory를 D:₩hapi-fhir₩workspaces₩workspace_client₩fhirstarter-master₩java₩happy-fhirstarters-client-skeleton로 설정한 후 Finish한다. 다음과 같이 hapi-fhirstarters-client-skeleton 프로젝트가 추가된 것을 확인할 수 있다. 프로젝트를 우클릭하여 [Maven] &gt; [Update Project…]를 선택한다. Force Update of Snapshots/Releases를 선택한 후 Ok하여 Update를 진행한다. TestApplication의 main 함수에, 실행시킬 소스코드를 작성하고 TestApplication을 Run하면 실행결과를 Console을 통해 확인할 수가 있다. TestApplication의 소스코드 예제는 아래에서 확인 가능하다. 소스코드 예제 (작업중)Read 예제1 Create 예제1 Update 예제1 Delete 예제1 끝.","link":"/2020/09/14/hapi-fhir-manual-7/"},{"title":"업무일지 2020년 10월 2주차","text":"2020년 10월 2주차 개인 업무일지이다. 언제 어떤 일들을 했는지 기억하기 위하여 남긴다. Schedule2020.10.05.월 FHIR 소프트웨어 버전 변경 검토 (OpenJDK 14 -&gt; 1.8 / Tomcat 8.5 -&gt; 9) FHIR 환경구축 가이드 수정 (변경된 소프트웨어 버전 반영) Linux에서 HAPI-FHIR JPA 서버 기동 테스트 2020.10.06.화 테스트계획서 보완 (연계테스트 시나리오 구체화) FHIR 단위테스트 수행 2020.10.07.수 FHIR 단위테스트 수행 및 테스트케이스(결과서) 작성 시나리오 테스트 계획 - Sample 데이터 확보 2020.10.08.목 운영자메뉴얼 최종 보완하여 공유 - Linux 기동 방법 추가, 오타 검수 시나리오 테스트 계획 수립 (오후에 공유하기) 2020.10.09.금한글날(휴일) 잘한 점/개선사항/배운 점 일을 시작하기 전에, 한번에 끝낼 수 있는 방법을 생각해야 한다. 두번 작업해야 하는 일은 문제가 있는 것이다. 도움은 반드시 상대방이 필요할 때 주어야 한다. 그래도 굳이 도움을 주고 싶다면, 내가 도울 일이 없을지를 상대방에게 물어보는게 좋다. 내 생각을 이야기할 때는 쉽사리 결론이나 의사결정을 단정짓지 않는 것이 좋다. 의사결정은 의사결정권자(관리자)의 몫이니 내 권한을 넘지 않도록 조심하는게 좋다. 일을 할 때는 가급적이면 몰래몰래 하는 것보다, (1) 눈에 보이게 (2) 예상 가능하게 하는 것이 좋다. 잘하고 싶다고 해서 혼자 너무 멀리 앞서나가고 있는 것은 아닌지를 경계해야 한다. 예상 가능한 범위 안에서 움직이되, 가능하다면 딱 10% 정도의 초과 아웃풋이 나오는 수준을 제시하자. 끝.","link":"/2020/10/09/work_202010_2/"},{"title":"제안서 작성 및 제출 단계 - 준비 (1&#x2F;4)","text":"제안서 작성 및 제출 단계는 총 4가지 [준비] - [작성] - [검수] - [제출]로 구성된다. 준비 (1/4) 작성 (2/4) (작성중) 검수 (3/4) (작성중) 제출 (4/4) (작성중) 본 글에서는 그 중에서 [준비] 단계에 대해 다루겠다. 준비 단계는 다음과 같이 상세 6가지 단계로 정리된다. 킥오프 (제안팀 구성, 협력구도 선정) 제안요청서(RFP) 분석 최근 제안서 / 유사 제안서 수급 제안 템플릿 제작 의뢰 (to 디자이너) 제안 스토리보드 및 WBS 작성 + 제안전략 도출 제안서 작성의 R&amp;R 정리 단계에 대한 구분은 필자의 판단으로 임의로 나눈 것이며, 업계의 표준은 아닐 수 있다.아래는 각각의 상세 단계에는 어떤 일들이 일어나는지, 어떤 것들을 주의해야 하는지 등 필자의 노하우에 대한 기록이다. 킥오프 (제안팀 구성, 협력구도 선정)제안서 작성업무는 제안팀 킥오프를 통해 시작된다. 킥오프는 PM을 통해 주최되고, 사업에 대한 개요와 협력구도, 일정, 제안팀구성 등에 대한 제안 계획을 설명하는 자리이다. 고객사로부터 RFP가 나온 경우에는 RFP도 공유받게 될 것이다. 즉, 이 자리를 통해 “어떤 사업이구나”, “내가 어떤 사람들과 일하겠구나”, “제안서는 언제 제출이구나” 등등의 정보를 얻을 수 있을 것이다. 최강입찰제안서:쉬플리코리아에 따르면, 제안팀은 남은 인력이 아니라, 필요한 인력으로 구성하라고 제언한다. 제안서는 무에서 유를 창조하는 작업이기 때문에, 제안멤버가 누구냐에 따라 제안서의 퀄리티가 크게 좌우되는 일이라고 볼 수 있다. 또한, 완벽한 제안서를 작성하기 위해서는 그레이 영역을 줄여줄 수 있는 전문가가 필요하다. 전략가, 프로젝트관리전문가, TA, SA, DBA, 개발자, 솔루션전문가 등 이 사업을 제안하는데 있어서 필요한 자원을 활용할 수 있어야 한다. 필자가 생각하기에, 킥오프가 중요한 이유는 제안팀의 분위기가 결정되는 행사이기 때문이다. 필자의 경험에 의하면, 제안서를 작성하는 업무를 선천적으로 좋아하는 사람은 거의 없다. 몇주간 매우 빡센 하루하루를 보낼 것이 자명하기 때문에, 본인이 제안팀에 소속되었다는 것을 오히려 꺼릴 가능성이 높다. 그렇기 때문에 킥오프의 핵심은, PM 입장에서 제안팀을 똘똘 뭉치게 할 수 있도록 리더십을 발휘하는 것이다. PM마저 대충대충, 회사가 시켜서 하는 것처럼 보여지면 그 제안은 이미 반쯤 실패했다고 봐도 된다. 이 제안이 어떤 의미가 있는지에 대해 설명하고 제안팀원들에게 명확한 비전을 제시해주는 것이 좋겠다. 제안요청서(RFP) 분석RFP란, Request for Proposal의 약자로, 흔히 제안요청서라고 부른다. 해외에서는 Bidding Document라고 하기도 한다. 제안요청서도 소규모의 프로젝트의 경우 적게는 30~40 페이지에서, 대규모 프로젝트의 경우 많게는 1,000페이지 이상이 되는 방대한 분량의 문서이다. RFP에는 고객의 요청사항의 모든 것이 담겨있다. 제안팀은 보통 RFP를 개별로 1부씩 출력해서 몇회독을 실시할 만큼, RFP의 문구 하나하나 놓치지 않기 위해 노력한다. (제안이 끝날 때쯤이면 어느 문구가 어느 페이지에 있는지 생각날 정도..) “제출마감일”을 기반으로 제안팀 마일스톤 도출 “평가항목”을 기반으로 예상 획득점수 도출 및 경쟁사 대비 수주확도 판단 “RFP의 목차”을 참고하여 제안서 목차 개발 RFP 전체 요구사항 항목에 1:1 매칭되는 체크리스트(조견표) 작성 RFP에 지속적으로 등장하는 주요 용어들에 대한 표준용어집 작성 제안팀 마일스톤 도출첫째, 가장 우선적으로 파악해야 할 것은, 당연하지만 제출마감일이다. 이를 기반으로 현실적인 제안팀 스케줄을 계획해야 한다. 그러나 안타깝게도 제출마감일을 넉넉하게 주는 친절한 발주처는 거의 없다. 대부분은 2주~3주 안에 제출하는 일정을 제시할 것이다. 그렇기 때문에 제출마감일을 기준으로 날짜를 역산하여 어떻게든 완성된 제안서를 만들어낼 수 있도록 스케줄을 짜야만 한다. 예상 획득점수 파악 및 수주확보 판단둘째, RFP에서 가장 중요한 내용을 꼽으라면, 단연코 평가항목이다. 우리 회사의 당락을 결정하는 부분이기 때문이다. RFP를 받으면 평가항목을 표로 나열하고, 우리 회사가 각 항목에 대해 몇점을 받을 수 있을지를 최대한 빨리 도출해내야 한다. 그리고 높은 점수를 얻지 못하는 부분들을 어떻게 만회할 것인지 전략을 세워야 한다. 여기서 ‘최대한 빨리’라는 의미는 경쟁사보다 한발 앞서 움직여야 한다는 의미이다. Ex1) 해당 분야에서 10년 이상 경력의 기술자/엔지니어를 최소 5명 투입해야 한다는 평가항목이 있다면, 만약 사내에 그런 엔지니어가 없다면 경쟁사보다 빠르게 시장에 있는 기술자/엔지니어를 확보해야만 한다.Ex2) 제안사가 해당 분야에서 최근 10년 내에 50억 이상 프로젝트 수주 이력이 10건 이상 있어야 한다는 평가항목이 있는데, 만약에라도 우리회사는 이력이 부족하다면 경쟁사보다 빠르게 컨소시엄사를 물색해야 한다. 제안서 목차 개발셋째, 제안서의 뼈대를 잡는 목차 작업이 필요하다. 국내 제안서는 일반적으로 다음과 같은 대목차를 잡는다. 1장. 사업 개요 2장. 제안사 소개 3장. 제안 내용 4장. 프로젝트 관리 5장. 추가제안 소목차는 사업 특성에 따라 크게 달라지므로 구체적으로 설명하기는 어렵지만, RFP의 흐름을 그대로 따라가는 것이 가장 좋다. 그 이유는, 평가자는 RFP와 제안서를 양쪽에 놓고 비교하면서 평가를 진행할 것이기 때문이다. 두 문서의 흐름이 동일하게 맞춰져있다면 평가하기 한결 수월할 것이 분명하다. 예를 들어, RFP에 다음과 같은 내용이 적혀 있다고 가정해보자. 프로젝트 관리방안에 품질관리, 위험관리, 자원관리, 원가관리, 일정관리, 형상관리를 제시하시오. 그럼 4장. 프로젝트 관리에 다음과 같이 구성하는 것이 좋겠다. 4.1 품질관리4.2 위험관리4.3 자원관리4.4 원가관리4.5 일정관리4.6 형상관리… 등 요구사항 체크리스트(조견표) 작성넷째, 요구사항 체크리스트란 조견표라고 불리는 문서이다. RFP에 명시된 모든 요구사항에 대해 제안서의 어느 목차/페이지에 작성되어 있는지를 1:1로 매칭하여 아래의 예시 형태로 작성하는 것이다. (작성하고 나면 조견표만 수십 페이지가 만들어진다.) RFP 요구사항 중요도 목차 페이지 만족여부 AA 시스템 구축 Critical IV-1.1 시스템 구축 52 만족 BB 인프라 구성 Critical IV-5.2 인프라 구성 156 만족 어떤 제안서든 간에 조견표를 첨부하는 것이 좋다. (RFP에 아예 조견표를 써서 제출하라고 되어 있는 경우도 많다.) 평가자 입장에서 제안서가 RFP의 요구사항에 대한 구현방안을 어디에 어떻게 작성했는지 수백 수천장의 제안서 안에서 특정 내용을 찾아내는 것은 여간 힘든 작업이 아니기 때문이다. 그러다가 평가자가 못보고 지나치기라도 하는 날에는 꼼짝없이 점수가 누락되고 이는 탈락으로 직결될 수 있으니 조견표는 반드시 첨부하는게 좋겠다. 표준용어집 작성다섯째, 표준용어집은 간과하고 지나가기 쉬운데, 그러다가 나중에 후회하는 경우가 많다. 제안서는 여러 작업자, 혹은 여러 협력사가 동시에 작업하는 방대한 문서이기 때문에, 만약에 표준 용어를 정의하지 않고 작업하면 나중에 취합하다가 참사가 발생할 수 있다. 예를 들어, 우리가 제안하는 제품이 갤럭시 노트라고 가정해보자. 이를 ‘갤럭시 노트’라고 통일하여 쓰자고 약속하지 않으면, 아래와 같이 다양한 단어들이 제안서에 중구난방으로 작성되어있을 것이다. 그럼 고객 입장에서 제안서를 볼 때 적잖이 당황할지도 모른다. Ex. 갤럭시 노트, 갤럭시 Note, 갤럭시 NOTE, 갤럭시 note, Galaxy 노트, Galaxy Note, GALAXY NOTE, 갤노트 등 뒤늦게 깨닫고 나중에 바로 잡으려고 하면 막상 쉽지 않으니, 처음에 표준용어집을 잘 정의하는 것이 좋다. 기본적으로 다음과 같은 것들은 표준용어로 정의해두는 것이 좋다. 대소문자 사용과 띄어쓰기까지 정확히 통일해야 한다. 그리고 그것이 RFP에 등장하는 용어라면, RFP 기준으로 맞추는 것이 가장 혼란이 적다. 회사명 (Ex. Samsung, HYUNDAI Motors, LG 등) 핵심 제품명 (Ex. 갤럭시 노트, Sonata 등) 핵심 서비스/시스템명 (Eclipse IDE, MySQL 등) 핵심 역할/전문가 (PM, PL, SA, TA 등) RFP에 등장하는 각종 용어/약어 최근 제안서 / 유사 제안서 수급제안서는 무에서 유를 창조하는 활동이지만, 참고할만한 다른 제안서가 있다면 이야기가 달라진다. 참고 제안서에 작성된 문구, 내용, 아이디어, 디자인 모든 것을 벤치마킹하여 새로운 제안서를 만들어낼 수 있기 때문이다. 특히, 제안 작업에 경험이 많지 않은 팀에게는 참고 제안서가 꼭 필요할 것이다. 여력이 된다면 아래 3가지의 참고 제안서를 수급하면 좋다. 우리 회사에서 가장 최근에 제출했던 제안서 (동일년도 것이 좋음) 회사소개, 프로젝트관리 챕터를 참고할 수 있다. 특히 회사소개에 들어가는 각종 회사 정보 (매출, 이익, 기술자수, 특허, 품질자격 등)를 아주 손쉽게 확보할 수 있다. 유사 분야에 가장 최근에 제출했던 제안서 제안전략, 프로젝트관리, 기술제안서(시스템구성 등) 챕터를 참고할 수 있다. 특히 제안전략을 어떻게 세워야 하는지, 유사 분야에서는 프로젝트관리 방법론을 어떻게 적용하였는지를 손쉽게 확보할 수 있다. 프로젝트에 투입되는 솔루션사의 제안서 기술 제안서, 추가 제안 챕터를 참고할 수 있다. 솔루션의 각종 기능들의 상세 설명들을 확보할 수 있다. 제안 템플릿 제작 의뢰 (to 디자이너)작성중 제안 스토리보드 및 WBS 작성 + 제안전략 도출작성중 제안서 작성의 R&amp;R 정리작성중","link":"/2020/10/10/proposal-document-1/"}],"tags":[{"name":"FHIR","slug":"FHIR","link":"/tags/FHIR/"},{"name":"RPA","slug":"RPA","link":"/tags/RPA/"},{"name":"Tomcat","slug":"Tomcat","link":"/tags/Tomcat/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"Eclipse","slug":"Eclipse","link":"/tags/Eclipse/"},{"name":"HAPI","slug":"HAPI","link":"/tags/HAPI/"},{"name":"모바일 표준","slug":"모바일-표준","link":"/tags/%EB%AA%A8%EB%B0%94%EC%9D%BC-%ED%91%9C%EC%A4%80/"},{"name":"착수보고","slug":"착수보고","link":"/tags/%EC%B0%A9%EC%88%98%EB%B3%B4%EA%B3%A0/"},{"name":"제안","slug":"제안","link":"/tags/%EC%A0%9C%EC%95%88/"},{"name":"레드마인","slug":"레드마인","link":"/tags/%EB%A0%88%EB%93%9C%EB%A7%88%EC%9D%B8/"},{"name":"주간 업무일지","slug":"주간-업무일지","link":"/tags/%EC%A3%BC%EA%B0%84-%EC%97%85%EB%AC%B4%EC%9D%BC%EC%A7%80/"},{"name":"표준","slug":"표준","link":"/tags/%ED%91%9C%EC%A4%80/"},{"name":"JDK","slug":"JDK","link":"/tags/JDK/"},{"name":"jpaserver","slug":"jpaserver","link":"/tags/jpaserver/"}],"categories":[{"name":"제안","slug":"제안","link":"/categories/%EC%A0%9C%EC%95%88/"},{"name":"주간 업무일지","slug":"주간-업무일지","link":"/categories/%EC%A3%BC%EA%B0%84-%EC%97%85%EB%AC%B4%EC%9D%BC%EC%A7%80/"},{"name":"기획 &gt; RPA","slug":"기획-RPA","link":"/categories/%EA%B8%B0%ED%9A%8D-RPA/"},{"name":"오픈소스 &gt; FHIR &gt; 기획","slug":"오픈소스-FHIR-기획","link":"/categories/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-FHIR-%EA%B8%B0%ED%9A%8D/"},{"name":"오픈소스 &gt; FHIR &gt; HAPI FHIR 설치","slug":"오픈소스-FHIR-HAPI-FHIR-설치","link":"/categories/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-FHIR-HAPI-FHIR-%EC%84%A4%EC%B9%98/"},{"name":"사업관리 &gt; 착수보고","slug":"사업관리-착수보고","link":"/categories/%EC%82%AC%EC%97%85%EA%B4%80%EB%A6%AC-%EC%B0%A9%EC%88%98%EB%B3%B4%EA%B3%A0/"},{"name":"오픈소스 &gt; 레드마인","slug":"오픈소스-레드마인","link":"/categories/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EB%A0%88%EB%93%9C%EB%A7%88%EC%9D%B8/"},{"name":"사업관리 &gt; 표준 산출물","slug":"사업관리-표준-산출물","link":"/categories/%EC%82%AC%EC%97%85%EA%B4%80%EB%A6%AC-%ED%91%9C%EC%A4%80-%EC%82%B0%EC%B6%9C%EB%AC%BC/"},{"name":"기획 &gt; 모바일 표준","slug":"기획-모바일-표준","link":"/categories/%EA%B8%B0%ED%9A%8D-%EB%AA%A8%EB%B0%94%EC%9D%BC-%ED%91%9C%EC%A4%80/"}]}